<?php

/**
 * @file
 * The Userpoints login module.
 */

/**
 * The variable name for the number of points to award for logging in.
 */
define('USERPOINTS_LOGIN', 'userpoints_login');

/**
 * The variable name for the userpoints login interval.
 */
define('USERPOINTS_LOGIN_INTERVAL', 'userpoints_login_interval');

/**
 * The variable name for the taxonomy to assign login userpoints to.
 */
define('USERPOINTS_LOGIN_TID', 'userpoints_login_tid');

/**
 * Implementation of hook_perm().
 */
function userpoints_login_perm() {
  return array('earn login points');
}

/**
 * Implementation of hook_userpoints().
 */
function userpoints_login_userpoints($op = 'setting', $params = array()) {
  if ($op == 'setting') {
    $group = 'userpoints_login';
    $form[$group] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('!Points for user log in', userpoints_translation()),
    );

    $form[$group][USERPOINTS_LOGIN] = array(
      '#type' => 'textfield',
      '#title' => t('!Points for user log in', userpoints_translation()),
      '#default_value' => variable_get(USERPOINTS_LOGIN, 0),
      '#size' => 5,
      '#maxlength' => 5,
    );

    $form[$group][USERPOINTS_LOGIN_INTERVAL] = array(
      '#type' => 'select',
      '#title' => t('Minimum interval between logins to accrue !Points', userpoints_translation()),
      '#default_value' => variable_get(USERPOINTS_LOGIN_INTERVAL, '86400'),
      '#options' => drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval'),
    );

    $form[$group][USERPOINTS_LOGIN_INTERVAL]['#options']['forever'] = t('Forever (registration only)');

    $form[$group][USERPOINTS_LOGIN_TID] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#default_value' => variable_get(USERPOINTS_LOGIN_TID, 0),
    '#options' => userpoints_get_categories(),
    '#description' => t('Login points will be assigned to this category. You can modify what categories are available by modifying the <a href="!url">Userpoints taxonomy</a>.',
      array('!url' => url('admin/content/taxonomy/'. variable_get(USERPOINTS_CATEGORY_DEFAULT_VID, '')))),
  );

    return $form;
  }
}

/**
 * Implementation of hook_user().
 */
function userpoints_login_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  if($op != 'login') {
    return;
  }

  // Ensure user has access to earn points for login.
  if (!user_access('earn login points')) {
    return;
  }

  // Ensure that user should earn points for this login.
  if (userpoints_login_check_timeout($user->uid)) {
    return;
  }

  // Delete old record and create a new one, so we can check it the next time
  // they login.
  db_query('DELETE FROM {userpoints_login} WHERE uid = %d', $user->uid);
  db_query('INSERT INTO {userpoints_login} (uid, timestamp) VALUES (%d, %d)', $user->uid, time());

  // Award the points.
  userpoints_userpointsapi(array(
    'points' => variable_get(USERPOINTS_LOGIN, 0),
    'uid' => $user->uid,
    'operation' => 'login',
    'entity_id' => $user->uid,
    'entity_type' => 'user',
    'tid' => variable_get(USERPOINTS_LOGIN_TID, 0),
  ));
}

/**
 * Determine if this user has earned points for logging in before.
 *
 * This will take into account a user defined interval, in which multiple logins
 * are counted as a single login, but after which the user is not counted as
 * having earned points for a login.
 *
 * @param $uid
 *  The User ID of the user to check.
 *
 * @return
 *  FALSE if the user hasn't earned points for logging in, TRUE if they have.
 */
function userpoints_login_check_timeout($uid = 0) {

  $interval = variable_get(USERPOINTS_LOGIN_INTERVAL, 86400);

  if ($interval == 'forever') {
    return (bool)db_result(db_query("SELECT COUNT(*) FROM {userpoints_login}
      WHERE uid = %d",
      $uid));
  }
  else {
    return (bool)db_result(db_query("SELECT COUNT(*) FROM {userpoints_login}
      WHERE uid = %d
      AND %d < (timestamp + %d)",
      $uid, time(), $interval));
  }
}
