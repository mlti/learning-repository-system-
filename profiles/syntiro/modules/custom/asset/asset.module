<?php
/**
* Implementation of hook_menu()
*
*/
function asset_menu() {
  $items = array();
  // My asset Listing page
  $items['bridge/myassets'] = array(
    'title' => 'Assets',
    'page callback' => 'myasset_view',
    'access arguments' => array('create asset content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/asset.inc',
  );
  // For asset convert into pdf url
  $items['asset/%node/overview/pdf'] = array(
    'title' => 'Asset PDF',
    'page callback' => 'asset_overview_pdf',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );
  // asset download url
  $items['asset/%node/download']=array(
    'title' => 'Download',
    'page callback' => 'view_download',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // For fck editor embed the content
  $items['asset/edit/get-embed'] = array(
    'description' => 'Getting the body of a asset node for ajax call from ',
    'page callback' =>'asset_get_embed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/asset.inc',
  );
  // For track the asset
  $items['asset/asset_tracking'] = array(
    'description' => 'Saving asset tracking data - from ajax call - from asset overview page',
    'page callback' => 'asset_tracking_asset',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/asset-tracking'] = array(
    'title' => t('Asset Statistics'),
    'description' => 'Asset tracking statistics page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asset_tracking_report'),
    'access arguments' => array('access asset reports'),
    'file' => 'includes/asset.inc',
  );
  // for stringable bead enabled
  $items['beads/stringable/%node/%'] = array(
    'title' => 'Full Sequence',
    'page callback' => 'beads_stringable',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'file' => 'includes/asset.inc',
  );
  // for stringable bead enabled
  $items['autocomplete/users/%'] = array(
    'page callback' => 'autocomplete_users',
    'access arguments' => array('access content'),
    'file' => 'includes/asset.inc',
  );
  // Asset block - ajax load
  $items['asset/block'] = array(
    'page callback' => 'asset_block_ajax',
    'access arguments' => array('create asset content'),
    'type' => MENU_CALLBACK,
    'file' => 'asset.inc',
    'file path' => drupal_get_path('module', 'asset'). '/includes',
  );
  // Asset listing - ajax load
  $items['asset/listing'] = array(
    'page callback' => 'asset_listing_ajax',
    'access arguments' => array('create asset content'),
    'type' => MENU_CALLBACK,
    'file' => 'asset.inc',
    'file path' => drupal_get_path('module', 'asset'). '/includes'
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function asset_perm() {
  return array('access asset reports', 'view assets', 'can review node', 'can coauthor node');
}

/**
 * Implementation of hook_theme().
 */
function asset_theme() {
  return array(
    'myasset_view' => array(
      'template' => 'templates/asset-view',
      'arguments' => array('results' => NULL),
    ),
    'asset_teaser' => array(
      'template' => 'templates/asset-teaser',
      'arguments' => array('results' => NULL),
    ),
    'bead_teaser' => array(
      'template' => 'templates/bead-teaser',
      'arguments' => array('results' => NULL),
    ),
    'beads_stringable' => array(
      'template' => 'templates/bead-stringable',
      'arguments' => array('results' => NULL),
    ),
    'asset_basket' => array(
      'arguments' => array('results' => NULL),
    ),
    'create_content_list' => array(
      'arguments' => array('results' => NULL),
    ),
    'beads_stringable_title' => array(
      'arguments' => array('results' => NULL),
    ),
  );
}
/**
 * Implementation of hook_block().
 * @param $op
 * @param $delta
 * @return block data
 */
function asset_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('My Assets Right');
    $blocks[1]['info'] = t('Full Sequence');
    return $blocks;
  }
  if ($op == 'view') {
    switch ($delta) {
      case 0:
        $node = function_exists("custom_node_load") ? custom_node_load() : NULL;
        if (($node->type == 'curriculum' || ($node->type == 'asset' && arg(3) == 'html') || ($node->type == 'bead' && arg(3) == 'html')) && arg(2) == 'content' && user_access('access search')) {
            $block['subject'] = t('My Assets');
            $block['content'] = drupal_get_form('myasset_basket_form');
        }
        break;
      case 1:
        if (arg(0) == "beads" && arg(1) == "stringable" && function_exists("beads_stringable")) {
          $node = node_load(arg(2));
          $block['subject'] = t('');
          $block['content'] = beads_stringable($node, arg(3), TRUE);
        }
        break;
    }
    return $block;
  }
}

/**
 * Implementing My Asset Basket in Asset Overview and Curriculum Overview Page
 */
function myasset_basket_form() {
  module_load_include('inc', 'asset', 'includes/asset');
  drupal_add_js(drupal_get_path('module', 'asset') . '/js/jquery.scrollTo.js');
  drupal_add_js(drupal_get_path('module', 'asset') . '/js/jquery.localscroll.js');
  drupal_add_js(drupal_get_path('module', 'asset') . '/js/asset.js');
  $form = array();
  $form['#attributes'] = array('style' => 'display: none');
  $form['myasset-content'] = array(
    '#type' => 'markup',
    '#value' => '<div id="asset-block-content">' . myasset_view('true') . '</div>',
  );

  return $form;
}


/**
 * Implements hook_form_alter() for node_type_form().
 */

function asset_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'page_node_form':
    case 'asset_node_form':
      //$form['#after_build'] = array('remove_title_fieldset');
      //echopre($form);
      $form['field_mlr']['tids']['#title'] = '';
      $form['field_openforreview']['#title'] = '';
      $form['field_type']['#title'] = '';
      
      // Commented due to Log entry
      //drupal_add_js(drupal_get_path('module', 'eb_others') .'/js/drag_drop_js.js');
      //This condition is used to hide the delete button if the curriculum is published.
      if (isset($form['#node']->field_published[0]['value'])) {
        if($form['#node']->field_published[0]['value'] == 1) {
          unset($form['buttons']['delete']);
        }
      }
      
      // For co author values changed to autocomplete
      $co_author = NULL;
      if ($form['#node']->field_coauthor) {
        foreach($form['#node']->field_coauthor as $key => $value) {
          if ($value['uid']) {
            $co_author_list[] = db_result(db_query("SELECT mail FROM {users} WHERE uid=%d", $value['uid']));
          }
        }
        $co_author = $co_author_list?implode(", ", $co_author_list):NULL;
      }
      
      // Reviewers values changed to autocomplete list
      if ($form['#node']->field_published[0]['value'] == 1) {
        $reviewers = NULL;
        if ($form['#node']->field_reviewers) {
          foreach($form['#node']->field_reviewers as $key => $value) {
            if ($value['uid']) {
              $reviewers_list[] = db_result(db_query("SELECT mail FROM {users} WHERE uid=%d", $value['uid']));
            }
          }
          $reviewers = $reviewers_list?implode(", ", $reviewers_list):NULL;
        }
        $form['reviewers'] = array(
          '#type' => 'textfield',
          '#title' => t($form['field_reviewers']['#title']),
          '#default_value' => $reviewers,
          '#size' => 60,
          '#autocomplete_path'  => 'autocomplete/users/reviewers',
        );
      }
      // setting max length for curriculum title
      $form['title']['#maxlength'] = 60;
      // Og related alters are done in course_group.module
      //eb_group.modules weight in system tabel is 2
      //Changing co author/reviewers button text - add another item TO add another
      if ($_SERVER['REMOTE_ADDR'] == '192.168.99.172') {
      //echopre($form['field_coauthor']);exit;
      }
      //echopre($form['nid']['#value']);
      // echopre($form);
      
      if($form['body_field']['teaser_js']['#teaser'] == 'edit-body') {
         $form['body_field']['teaser_js']['#prefix']='<label for="edit-body" class="element-invisible">Teaser</label>';
      }
      else if($form['body_field']['teaser_js']['#teaser'] == 'edit-teaser-js') {
         $form['body_field']['teaser_js']['#prefix']='<label for="edit-teaser-js" class="element-invisible">Teaser</label>';
      }
      
     
      $form['field_coauthor']['#prefix']='<div aria-hidden="true"  hidden>';
      $form['field_coauthor']['#suffix']='</div>';
      $form['field_reviewers']['#prefix']='<div style="display:none;">';
      $form['field_reviewers']['#suffix']='</div>';
      $form['field_coauthor']['#rules'] = array('coauthor_validate');
      $form['coauthor'] = array(
        '#type' => 'textfield',
        '#title' => t($form['field_coauthor']['#title']),
        '#default_value' => $co_author,
        '#size' => 60,
        '#autocomplete_path'  => 'autocomplete/users/coauthor',
      );
      
      //making the buttons center alignment and adding a cancel button
      //@todo: mail will send to reviewers if removed or added
      $form['buttons']['submit']['#prefix'] = '<div class="button-main">';
      // For redirect to pervious page if cancel is clicked
      $previous_url = ($form['#node']->type == 'asset' && arg(1) == 'add') ? url('bridge/myassets'):url('node' . '/' . arg(1)) ;
      $form['buttons']['cancel']  = array(
       '#type' => 'markup',
       '#value' => '<input type="button"  class="form-submit" value="Cancel" name="cancel" onclick=window.location="'. $previous_url .'">',
       '#weight'=> 30,
       '#prefix' => '<span class="btn-center">',
       '#suffix' => '</span></div>'
      );
      //for edit content tab
      if (arg(2) == 'content') {
        if(arg(2) == 'content' && arg(0) == 'node') {
          $form['#prefix'] = '<div class="common-list-wrapper"><div style="display: none;" class="common-list-drop-preview">' . l('Preview', '#', array('attributes' => array('title' => 'results'))) . '</div>';
        }
        else{
          $form['#prefix'] = '<div class="common-list-wrapper"><div style="display: none;" class="common-list-drop-preview">' . l('Preview', '#', array('attributes' => array('title' => 'results'))) . '</div><h2 class="titlespace" style="display: none;"></h2>';
        $form['#suffix'] = '</div>';
        }
        
        $form['field_custom_file_upload'][0]['#title'] = NULL;
        //editing asset overview - html format
        drupal_add_js(drupal_get_path('module', 'curriculum') .'/js/baskets.js');
        drupal_add_js(drupal_get_path('module', 'asset') .'/js/asset-drag-drop.js');
        // drupal_add_js(drupal_get_path('module', 'eb_others') .'/js/preview-basket.js');
        drupal_add_js(
          array(
            'asset' => array(
              'thisAsset' => arg(1),
            )
          ), 'setting'
        );
        // For tip in asset edit page
        $form['help_text'] = array(
          '#type' => 'markup',
          '#value' => '<div class="tip-description" ><div class="edit-helptext"><span class="font-bold">Tip:</span> Please use the Text Editor to write the content of your asset, Additionally the Assets could be drag and dropped in the editor from the Bridge basket.</div><div class="tip-close">' . l("X", "#", array("attributes" => array("title" => "Close"), "external" => TRUE)) . '</div><div class="tip-open" style="display:none"> ' . theme_image(drupal_get_path('theme', 'educationhub') .'/images/idea2.png', 'Click to View Tip', 'Click to View Tip') . '</div></div>',
          '#weight' => -60,
        );
        //hide title field
        $form['title']['#type'] = 'hidden';

        
        //hide show summary in full view
        $form['body_field']['teaser_include']['#access'] = FALSE;
        $form['body_field']['body']['#title'] = NULL;     
        //hide input format
        $form['body_field']['format']['#prefix'] = "<div style='display:none'> ";
        $form['body_field']['format']['#suffix'] = "</div>";
        
        //hiding all other fields
        $form['field_custom_file_upload']['#suffix'] = '<div style="display:none;">';
        $form['field_published']['#suffix'] = '</div>';
        $form['field_custom_file_upload'][0]['#description'] = "Please upload the files to associate with this Asset. The uploaded attachments would be shown below the content you create in text editor. </br>Click the image icon " . theme_image(drupal_get_path('theme', 'educationhub') .'/images/imageicon.jpg') . "  in text editor to insert image with in the content. <ul class='bullet-list'><li>Please make sure all digital documents (word processor, spreadsheet, presentations) are tested for accessibility. They will need to use MS Office for Windows or LibreOffice.</li><li>PDFs need to be tagged appropriately and checked for accessibility using the accessibility checker in Adobe Acrobat Pro</li><li>Any video with spoken words needs to be captioned.</li><li>Any audio file (i.e., podcast) needs to have a transcript.</li><li>For more information on create Accessible Digital Documents visit: <a href='http://mainecite.org/add/index.html' target='_blank'>http://mainecite.org/add/index.html</a></li></ul>";
        $form['field_custom_file_upload']['0']['#title'] = "File Upload";
      }
      else {
        //edit page
        //hide the body field for editing info
        $form['body_field']['#prefix']='<div hidden>';
        $form['body_field']['#suffix']='</div>';

        //Will add a title tag named status below the reviewer field.
        $form['field_format']['#prefix'] = '<div style="display:none;">';
        $form['field_format']['#suffix'] = '</div>';

        $form['field_custom_file_upload']['#prefix'] = '<div style="display:none;">';
        $form['field_custom_file_upload']['#suffix'] = '</div>';
        $form['field_published']['#prefix']='<div style="display:none;">';
        $form['field_published']['#suffix']='</div>';

        //on addnew set the default value for the format select box
        if(arg(1) == 'add') {
          $form['buttons']['submit']['#value'] = 'Next';
          $form['field_author'][0]['#default_value']['uid'] = $user->uid;
          $form['field_type']['#default_value'][0]['value'] = 1;
        }
      }
      
      break;
    case 'bead_node_form':
      // Bead Edit Page Button Center Alignment
      $previous_url = url('node' . '/' . arg(1));
      $form['buttons']['submit']['#prefix'] = '<div class="button-main">';
      $form['buttons']['cancel']  = array(
       '#type' => 'markup',
       '#value' => '<input type="button"  class="form-submit" value="Cancel" name="cancel" onclick=window.location="'. $previous_url .'">',
       '#weight'=>30,
       '#prefix' => '<span class="btn-center">',
       '#suffix' => '</span></div>'
      );
      $form['body_field']['teaser_include']['#type']='hidden';
      $form['body_field']['teaser_js']['#type']='hidden';
      if (arg(2)=='content') {
        if(arg(3)=='html') {
          //editing asset overview - html format
          drupal_add_js(drupal_get_path('module', 'curriculum') .'/js/baskets.js');
          drupal_add_js(drupal_get_path('module', 'asset') .'/js/asset-drag-drop.js');
          drupal_add_js(drupal_get_path('module', 'eb_others') .'/js/preview-basket.js');
          drupal_add_js(
            array(
              'asset' => array(
                'thisAsset' => arg(1),
              )
            ), 'setting'
          );

          $form['buttons']['submit']['#prefix'] = '<div class="button-main">';
          $form['buttons']['submit']['#sufix'] = '</div>';

          $form['title']['#prefix'] = '<div style="display:none;">';
          $form['title']['#suffix'] = '</div>';

          $form['body_field']['body']['#title']='';

          $form['field_source_id']['#prefix'] = '<div style="display:none;">';
          $form['field_source_id']['#suffix'] = '</div>';

          $form['field_source']['#prefix'] = '<div style="display:none;">';
          $form['field_source']['#suffix'] = '</div>';

          $form['field_bead_author']['#prefix'] = '<div style="display:none;">';
          $form['field_bead_author']['#suffix'] = '</div>';

          $form['taxonomy']['#prefix'] = '<div style="display:none;">';
          $form['taxonomy']['#suffix'] = '</div>';

          //hiding all other fields
          $form['field_format']['#prefix']='<div style="display:none;">';
          $form['field_language']['#suffix']='</div>';

          $form['field_file_upload']['#prefix'] = '<div style="display:none;">';
          $form['field_file_upload']['#suffix'] = '</div>';

          //hiding revision information fieldset
          $form['revision_information']['#prefix']='<div style="display:none;">';
          $form['revision_information']['#suffix']='</div>';
          //hiding field format
          $form['body_field']['format']['#prefix'] = "<div style=display:none> ";
          $form['body_field']['format']['#suffix'] = "</div>";


          //hiding revision information fieldset
          $form['field_bead_seq_no']['#prefix']='<div style="display:none;">';
          $form['field_bead_seq_no']['#suffix']='</div>';
          $form['#redirect'] = 'node/'.arg(1);
        }
        else {
          // Changing Label Name

          $form['field_file_upload']['#title'] = 'File Upload';
          $form['buttons']['#prefix']='<div class="button-main">';
          $form['buttons']['#suffix']='</div>';
          $form['buttons']['submit']['#prefix']='<div id="hide_remove_upload">';
          $form['buttons']['submit']['#suffix']='</div>';
          $form['buttons']['delete']['#prefix']='<div style="display:none;">';
          $form['buttons']['delete']['#suffix']='</div>';
          $form['buttons']['cancel']['#prefix']='<div style="display:none;">';
          $form['buttons']['cancel']['#suffix']='</div>';
          //  editing asset overview - other than html format
          $form['title']['#prefix']='<div style="display:none;">';
          $form['field_format']['#suffix']='</div>';

          $form['field_language']['#prefix'] = '<div style="display:none;">';
          $form['field_language']['#suffix'] = '</div>';
        }
      }
      else if(arg(2) == 'edit') {
        $form['body_field']['#prefix']='<div style="display:none;">';
        $form['body_field']['#suffix']='</div>';
        $form['field_file_upload']['#prefix'] = '<div style="display:none;">';
        $form['field_file_upload']['#suffix'] = '</div>';
        //hiding revision information fieldset
        $form['revision_information']['#prefix']='<div style="display:none;">';
        $form['revision_information']['#suffix']='</div>';
      }
      break;
    case 'multichoice_node_form':
      $form['buttons']['#prefix']= '<div class="button-main">';
      $form['buttons']['#suffix'] = '</div>';
      break;
    case 'quiz_node_form':
       // For redirect to pervious page if cancel is clicked
      if (arg(0) == 'node' && arg(1) == 'add') {
        $previous_url = url('bridge' . '/myassets');
        $form['field_published']['#default_value'][0]['value'] = 1;
      }
      else {
        $previous_url =  url('node' . '/' . arg(1));
      }
      $form['buttons']['#prefix']='<div class="button-main">';
      $form['buttons']['cancel']  = array(
       '#type' => 'markup',
       '#value' => '<input type="button"  class="form-submit" value="Cancel" name="cancel" onclick=window.location="'. $previous_url. '">',
       '#weight'=>15,
       '#prefix' => '<span class="btn-center">',
       '#suffix' => '</span>',
      );
      $form['buttons']['#suffix'] = '</div>';
      $form['field_published']['#prefix'] = "<div style='display:none'>";
      $form['field_published']['#suffix'] = "</div>";
      break;
    case 'quiz_results_manage_results_form':
      $form['confirm_delete']['confirm_delete']['#prefix'] = '<div class="button-main">';
      $form['confirm_delete']['cancel']['#suffix'] = '</div>';
      $previous_url = url('node/' . $form['#parameters'][2]->nid . '/results');
      break;
  }
}




function remove_title_fieldset($form, &$form_state) {
  //remove title for accessibility
  echo "hi";
  echopre($form);
  $form['group_test']['field_mlr']['tids']['#title'] = '';
  $form['group_openforreview']['field_openforreview']['value']['#title'] = '';
  $form['group_type']['field_type']['value']['#title'] = '';
  return $form;
}
/**
 * Implements hook_nodeapi().
 *
 * @see privatemsg_mail_send().
 * @see validation_coauthor_check() in eb_others_common.inc
 */
function asset_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'insert':
      switch ($node->type) {
        case 'asset':
          //For Reviewer, Co-author mailing functionality on insert case.
          $flag = 0;
          //Check whether node published option is checked. For Reviewer mail.
          if ($node->field_published[0]['value'] == 1) {
            // When Add the Reviewer, they got mail on Playlist creation.
            if (!$flag) {
              if (!empty($node->field_reviewers)) {
                $reviewer_presave = array();
                foreach ($node->field_reviewers as $key => $value) {
                  if ($value['uid']) {
                    $reviewer_presave[$value['uid']] = $value['uid'];
                  }
                }
                if ($reviewer_presave) {
                  $review_receipients = function_exists("co_authorcheck") ? co_authorcheck($reviewer_presave) : NULL;
                  $assign_msg = function_exists("privatemsg_assign_asset_message") ? privatemsg_assign_asset_message('added', 'reviewer', 'reviews', check_plain($node->title), $node->uid, $node->nid) : NULL;
                  if(is_array($review_receipients) && (count($review_receipients) > 0) && function_exists("privatemsg_mail_send")){
                    privatemsg_mail_send($review_receipients, $user, $assign_msg['subject'], $assign_msg['body']);
                  }
                }

              }
            }
          }
          // When Add the Co-Author, they got mail on Playlist creation. No need to check the Published status for Co-Author mail.
          if ($node->field_coauthor) {
            $co_author_presave = array();
            foreach ($node->field_coauthor as $key => $value) {
              if ($value['uid']) {
                $co_author_presave[$value['uid']] = $value['uid'];
              }
            }
            $co_author_receipients = co_authorcheck($co_author_presave);
            $assign_msg = privatemsg_assign_asset_message('added', 'co-author', 'overview', check_plain($node->title), $node->uid, $node->nid);
            //Check whether atleast one user has added as Co-author.
            if(($node->field_coauthor[0]['uid']) && is_array($co_author_receipients) && (count($co_author_receipients) > 0)){
              privatemsg_mail_send($co_author_receipients, $user, $assign_msg['subject'], $assign_msg['body']);
            }
          }
          // Apache Solr Index Purpose
          if (function_exists('_apachesolr_nodeapi_update')) {
            _apachesolr_nodeapi_update($node);
          }
          $_REQUEST['destination'] = 'node/' . $node->nid . '/content';
        break;
      }
    break;
    case 'validate':
      switch ($node->type) {
        case 'asset':
          if (function_exists("validation_check")) {
            validation_check($node);
          }
          $flag = 0;
          //jpg, JPG, gif, GIF, PDF, pdf, MOV, mov, FLV, flv, doc, DOC, docx, DOCX, xls, XLS, PPT, ppt
          //if ($node->field_custom_file_upload[0]['filename']) {
          //  $words = split("[.]",$node->field_custom_file_upload[0]['filename']);
          //  $val = _upload_file_limits_custom($user);
          //  $default_php_upload_size = (int)(ini_get('upload_max_filesize'));
          //  $file_size = (double)format_size(filesize(file_directory_path() . '/asset/' .$node->field_custom_file_upload[0]['filename']));
          //  if($words[1] == 'jpg' || $words[1] == 'JPG'|| $words[1] == 'gif' || $words[1] == 'GIF' || $words[1] == 'PDF' || $words[1] == 'pdf' || $pathinfo['extension'] == 'MOV' || $pathinfo['extension'] == 'mov' || $pathinfo['extension'] == 'FLV' || $pathinfo['extension'] == 'flv' || $pathinfo['extension'] == 'DOC' || $pathinfo['extension'] == 'doc' || $pathinfo['extension'] == 'DOCX' || $pathinfo['extension'] == 'docx' || $pathinfo['extension'] == 'PPT' || $pathinfo['extension'] == 'ppt' || $pathinfo['extension'] == 'PPTX' || $pathinfo['extension'] == 'pptx' || $pathinfo['extension'] == 'XLS' || $pathinfo['extension'] == 'xls' || $pathinfo['extension'] == 'XLSX' || $pathinfo['extension'] == 'xlsx') { }
          //  else {
          //    form_set_error('field_custom_file_upload', 'Please Select the Valid File Format.');
          //    $flag = 1;
          //  }
          //}
          if($node->field_published[0]['value'] == 1) {
              if($node->field_reviewers[0]['uid'] == '') {
                //form_set_error('field_reviewers', 'Please add Reviewers.');
                $flag = 1;
              }
              // When Add the Reviewer or Remove the reviewer the mail will send
              if (!$flag && arg(1) != 'add') {
                if ($node->field_reviewers) {
                  $reviewer_presave = array();
                  foreach ($node->field_reviewers as $key => $value) {
                    if ($value['uid']) {
                      $reviewer_presave[$value['uid']] = $value['uid'];
                    }
                  }
                }
                $query = db_query("select RE.field_reviewers_uid from {content_field_reviewers} RE LEFT JOIN {node} N on N.vid = RE.vid where N.nid=%d", arg(1));
                if (db_affected_rows()) {
                  $reviewer = array();
                  while ($array = db_fetch_object($query)) {
                    if ($array->field_reviewers_uid) {
                      $reviewer[$array->field_reviewers_uid] = $array->field_reviewers_uid;
                    }
                  }
                  $arry_diff_add_reviewer = array_diff($reviewer_presave, $reviewer);
                  $arry_diff_remove_reviewer = array_diff($reviewer, $reviewer_presave);
                  if ($arry_diff_add_reviewer) {
                    $review_receipients = co_authorcheck_asset($arry_diff_add_reviewer);
                    $assign_msg = privatemsg_assign_asset_message('added', 'reviewer', 'reviews', $node->title, $node->uid, $node->nid);
                  }
                  elseif ($arry_diff_remove_reviewer) {
                    $review_receipients = co_authorcheck_asset($arry_diff_remove_reviewer);
                    $assign_msg = privatemsg_assign_asset_message('removed', 'reviewer', 'reviews', $node->title, $node->uid, $node->nid, 'from');                   }

                }
                else {
                  // New Reviewer Added Only
                  $review_receipients = co_authorcheck_asset($reviewer_presave);
                  $assign_msg = privatemsg_assign_asset_message('added', 'reviewer', 'reviews', $node->title,  $node->uid, $node->nid);
                }
                // Check add and remover reviewer (or) Add reviewer only
                if ($arry_diff_add_reviewer && $arry_diff_remove_reviewer) {
                  // Add New Reviewer
                  if(is_array($review_receipients) && (count($review_receipients) > 0)){
                    privatemsg_mail_send($review_receipients, $user, $assign_msg['subject'], $assign_msg['body']);
                  }
                  // Remove Reviewer
                  $remove_review = co_authorcheck_asset($arry_diff_remove_reviewer);
                  $assign_msg = privatemsg_assign_asset_message('removed', 'reviewer', 'reviews', $node->title, $node->uid, $node->nid, 'from');
                  if(is_array($remove_review) && (count($remove_review) > 0)){
                    privatemsg_mail_send($remove_review, $user, $assign_msg['subject'], $assign_msg['body']);
                  }
                }
                elseif ($review_receipients) {
                  //Add New Reviwer Only
                  if(is_array($review_receipients) && (count($review_receipients) > 0)){
                    privatemsg_mail_send($review_receipients, $user, $assign_msg['subject'], $assign_msg['body']);
                  }
                }
              }
          }

          // To Send Message(by mail) to Co author if he added
          if (!$flag && arg(1) != 'add') {
            if ($node->field_coauthor) {
              $co_author_presave = array();
              foreach ($node->field_coauthor as $key => $value) {
                if ($value['uid']) {
                  $co_author_presave[$value['uid']] = $value['uid'];
                }
              }
            }
            $query = db_query("select CO.field_coauthor_uid from {content_field_coauthor} CO LEFT JOIN {node} N on N.vid = CO.vid where N.nid=%d", arg(1));
            if (db_affected_rows()) {
              $co_author = array();
              while ($array = db_fetch_object($query)) {
                if ($array->field_coauthor_uid) {
                  $co_author[$array->field_coauthor_uid] = $array->field_coauthor_uid;
                }
              }
              $arry_diff_add = array_diff($co_author_presave, $co_author);
              $arry_diff_remove = array_diff($co_author, $co_author_presave);

              if ($arry_diff_add ) {
                $arry_receipients = co_authorcheck_asset($arry_diff_add);
                $assign_msg = privatemsg_assign_asset_message('added', 'co-author', 'overview', $node->title, $node->uid, $node->nid);
              }
              elseif ($arry_diff_remove) {
                $arry_receipients = co_authorcheck_asset($arry_diff_remove);
                $assign_msg = privatemsg_assign_asset_message('removed', 'co-author', 'overview', $node->title, $node->uid, $node->nid, 'from');
              }
            }
            else {
              $arry_receipients = co_authorcheck_asset($co_author_presave);
              $assign_msg = privatemsg_assign_asset_message('added', 'co-author', 'overview', $node->title, $node->uid, $node->nid);
            }
            if ($arry_diff_add && $arry_diff_remove) {
              if(is_array($arry_receipients) && (count($arry_receipients) > 0)){
                privatemsg_mail_send($arry_receipients, $user, $assign_msg['subject'], $assign_msg['body']);
              }
              $arry_remove_receipients = co_authorcheck_asset($arry_diff_remove);
              $assign_msg = privatemsg_assign_asset_message('removed', 'co-author', 'overview', $node->title, $node->uid, $node->nid, 'from');
              if(is_array($arry_remove_receipients) && (count($arry_remove_receipients) > 0)){
                privatemsg_mail_send($arry_remove_receipients, $user, $assign_msg['subject'], $assign_msg['body']);
              }
            }
            elseif(is_array($arry_receipients) && (count($arry_receipients) > 0)){
              privatemsg_mail_send($arry_receipients, $user, $assign_msg['subject'], $assign_msg['body']);
            }
          }
          if (arg(2) == 'content') {
            if ($node->body == '') {
              form_set_error('body', 'Please Enter the content');
            }
          }
        break;
      }
    break;
  case 'view':
    // To display only body in view page all other fields are unset here.
    drupal_add_js(drupal_get_path('module','asset').'/js/asset-ddmenu.js');
    if($node->type == 'quiz'){
       /*Check whether the Quiz node is already visited by this currently logged in user*/
       if(!db_result(db_query("SELECT dis_id FROM {eb_group_discussion_statistics} WHERE uid = %d AND dis_nid = %d", $user->uid, arg(1)))){
         db_query("INSERT INTO {eb_group_discussion_statistics} SET uid = %d, dis_nid = %d, access_time = %d", $user->uid, arg(1), time());
       }
    }
    break;
  case 'update':
    // Apache Solr Index Purpose
    if (function_exists('_apachesolr_nodeapi_update')) {
      _apachesolr_nodeapi_update($node);
    }
  break;
  case 'delete':
    switch($node->type) {
      case 'asset':
        notification_asset_delete($node);
        break;
      case 'bead':
        notification_bead_delete($node);
        break;
    }
    // Apache Solr Index Purpose
    if (function_exists('_apachesolr_nodeapi_update')) {
      _apachesolr_nodeapi_update($node);
    }
    break;
  case 'presave':
    switch($node->type) {
      case 'asset':
        // Assign coauthor field to node->field_coauthor
        if (isset($node->coauthor)) {
          if ($node->coauthor) {
            $i = 0;
            $co_author_list = explode(", ", $node->coauthor);
            //Check whether the last element is empty, if yes remove that empty element
            if (trim($co_author_list[count($co_author_list)-1]) == '') {
              array_pop($co_author_list);
            }
            if ($co_author_list) {
              //Unset the existing Co Author values, then only our assign will work
              unset($node->field_coauthor);
              foreach($co_author_list as $key => $value) {
                $username = NULL;
                $username = db_result(db_query("SELECT uid FROM {users} where mail='%s'", trim($value)));
                //$username = db_result(db_query("SELECT uid FROM {users} where name='%s'", trim($value)));
                if (db_affected_rows() && $username != 0) {
                  $node->field_coauthor[$i]['uid'] = $username;
                  $node->field_coauthor[$i]['_weight'] = $i;
                  $i++;
                }
              }
            }
          }
          else {
            // if coauthor field is empty
            $i = 0;
            if ($node->field_coauthor) {
              foreach($node->field_coauthor as $value) {
                $node->field_coauthor[$i]['uid'] = NULL;
                $i++;
              }
            }
          }
        }
        // Assign reviewers field to node->field_reviewers
        if (isset($node->reviewers)) {
          if ($node->reviewers) {
            $i = 0;
            $co_reviewers_list = explode(",", $node->reviewers);
            //Check whether the last element is empty, if yes remove that empty element
            if (trim($co_reviewers_list[count($co_reviewers_list)-1]) == '') {
              array_pop($co_reviewers_list);
            }
            if ($co_reviewers_list) {
              //Unset the existing Reviewer values, then only our assign will work
              unset($node->field_reviewers);
              foreach($co_reviewers_list as $key => $value) {
                $username = NULL;
                $username = db_result(db_query("SELECT uid FROM {users} where mail='%s'", trim($value)));
                //$username = db_result(db_query("SELECT uid FROM {users} where name='%s'", trim($value)));
                if (db_affected_rows() && $username != 0) {

                  $node->field_reviewers[$i]['uid'] = $username;
                  $node->field_reviewers[$i]['_weight'] = $i;
                  $i++;
                }
              }
            }
          }
          else {
            $i= 0;
            if ($node->field_reviewers) {
              foreach($node->field_reviewers as $value) {
                $node->field_reviewers[$i]['uid'] = NULL;
                $i++;
              }
            }
          }
        }
        // Set the default status based on published field
        if ($node->field_published[0]['value'] == 1) {
          $node->status = 1;
        }
        else {
          $node->status = 0;
        }
        // Assign format value
        if ($node->field_custom_file_upload[0]['filename']) {
          $pathinfo = pathinfo($node->field_custom_file_upload[0]['filename']);
          $val = _upload_file_limits_custom($user);
          $default_php_upload_size = (int)(ini_get('upload_max_filesize'));
          $file_size = (double)format_size(filesize(file_directory_path() . '/asset/' .$node->field_custom_file_upload[0]['filename']));
          
          if($pathinfo['extension'] == 'jpg' || $pathinfo['extension'] == 'JPG'|| $pathinfo['extension'] == 'gif' || $pathinfo['extension'] == 'GIF') {
            $node->field_format[0]['value'] = 'IMAGE';
          }
          elseif ($pathinfo['extension']=='PDF' || $pathinfo['extension']=='pdf') {
            $node->field_format[0]['value'] = 'PDF';
          }
          elseif ($pathinfo['extension'] == 'MOV' || $pathinfo['extension'] == 'mov' || $pathinfo['extension'] == 'FLV' || $pathinfo['extension'] == 'flv' ) {
            $node->field_format[0]['value'] = 'VIDEO';
          }
          elseif ($pathinfo['extension'] == 'DOC' || $pathinfo['extension'] == 'doc' || $pathinfo['extension'] == 'DOCX' || $pathinfo['extension'] == 'docx' ) {
            $node->field_format[0]['value'] = 'DOCUMENT';
          }
          elseif ($pathinfo['extension'] == 'XLS' || $pathinfo['extension'] == 'xls' || $pathinfo['extension'] == 'XLSX' || $pathinfo['extension'] == 'xlsx') {
            $node->field_format[0]['value'] = 'EXCEL';
          }
          elseif ($pathinfo['extension'] == 'PPT' || $pathinfo['extension'] == 'ppt' || $pathinfo['extension'] == 'PPTX' || $pathinfo['extension'] == 'pptx') {
            $node->field_format[0]['value'] = 'PRESENTATION';
          }
          else {
            $node->field_format[0]['value'] = 'OTHERS';
          }
        }
        else {
          $node->field_format[0]['value'] = 'HTML';
        }
        if (!user_access("administer filters"))  {
          $node->format = 2;
          $node->body = preg_replace('/<script\b[^>]*>(.*?)<\/script>/is', "", $node->body);
          $node->teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL);
        }
        break;
      case 'bead':
        if (!user_access("administer filters"))  {
          $node->format = 2;
          $node->body = preg_replace('/<script\b[^>]*>(.*?)<\/script>/is', "", $node->body);
          $node->teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL);
        }
        break;
    }
    break;
  }
}

/**
 * Implementing to check coauthor
 **/
function co_authorcheck_asset($arry_diff) {
  $arry_receipients = '';
  if ($arry_diff) {
    foreach ($arry_diff as $key => $value) {
      if ($value) {
        $user_name =   db_result(db_query("SELECT name FROM {users} WHERE uid=%d", $value));
        $temp_user_list = user_load(array('name' => trim($user_name)));
        $arry_receipients[$temp_user_list->uid] = $temp_user_list;
      }
    }
  }
  return $arry_receipients;
}

/**
 * Notification Email will Send to Bookmarked user, Recommended user
 *
 */
function notification_bead_delete($node) {
  global $user;

  // Check for Associated Bead in Curriculum Topics
  $query = db_query("SELECT T.cid FROM {curriculum_topics_assets} TA INNER JOIN {curriculum_topics} T ON  T.topic_id = TA.topic_id WHERE TA.asset=%d", $node->nid);
  if (db_affected_rows()) {
    while ($curri_asso = db_fetch_object($query)) {
      $node_associated = node_load($curri_asso->cid);
      // Apache Solr Index Purpose
      if (function_exists('_apachesolr_nodeapi_update')) {
        _apachesolr_nodeapi_update($node_associated);
      }
      // Check for Associated Co-Author and Send Notification Mail
      if ($node_associated->field_coauthor) {
        $coauthor = array();
        foreach($node_associated->field_coauthor as $value) {
          // Mail will not send to Deleted user
          if ($value['uid'] != $user->uid && $value['uid']) {
            $coauthor[$value['uid']]->uid = $value['uid'];
          }
        }
        if(is_array($coauthor) && (count($coauthor) > 0)){
          $subject = 'Your associated bead has been removed';
          $body = 'Your associated bead ' . $node->title . ' has been removed';
          privatemsg_mail_send($coauthor, $user, $subject, $body);
        }
      }
      // Check for Associated Authors and Send Notification Mail
      // Mail will not send to Deleted user
      if ($node_associated->field_author[0]['uid'] != $user->uid && $node_associated->field_author[0]['uid']) {
        $author_list = array();
        $author_list[$author]->uid = $node_associated->field_author[0]['uid'];
        $subject = 'Your bead has been removed';
        $body = 'Your bead ' . $node->title . ' has been removed';
        if(is_array($author_list) && (count($author_list) > 0)){
          privatemsg_mail_send($author_list, $user, $subject, $body);
        }
      }
    }
  }
  // Notification Mail will send to Bookmarked Users
  $bookmark_query = db_query("SELECT uid FROM {bookmark} WHERE asset=%d", $node->nid);
  if (db_affected_rows()) {
    $arry_receipients = array();
    while ($bookmark_result = db_fetch_object($bookmark_query)) {
      $arry_receipients[$bookmark_result->uid]->uid = $bookmark_result->uid;
    }
    $subject = 'Bookmarked bead has been removed';
    $body = 'Your bookmarked ' . $node->title . ' bead has been removed';
    if(is_array($arry_receipients) && (count($arry_receipients) > 0)){
      privatemsg_mail_send($arry_receipients, $user, $subject, $body);
    }
  }
  // Notification Mail will send to Recommeded users
  $recommend_query = db_query("SELECT to_uid FROM {recommend} WHERE asset=%d", $node->nid);
  if (db_affected_rows()) {
    $arry_receipients = array();
    while ($recommend_result = db_fetch_object($recommend_query)) {
      $arry_receipients[$recommend_result->to_uid]->uid = $recommend_result->to_uid;
    }
    $subject = 'Recommended bead has been removed';
    $body = 'Your Recommended ' . $node->title . ' bead has been removed';
    if(is_array($arry_receipients) && (count($arry_receipients) > 0)){
      privatemsg_mail_send($arry_receipients, $user, $subject, $body);
    }
  }
  //delete assignment related content while deleting playlist
  $query = db_query("SELECT id FROM {curriculum_topics_assets} WHERE asset = %d", $node->nid);
  if (db_affected_rows()) {
    while($row = db_fetch_object($query)) {
      db_query("DELETE FROM {assignment} WHERE st_id=%d", $row->id);
      db_query("DELETE FROM {assignment_assign} WHERE st_id=%d", $row->id);
      db_query("DELETE FROM {assignment_statistics} WHERE st_id=%d", $row->id);
    }
  }
  //delete the corresponding bookmarks and recommendations and Associated Curriculum Topics
  db_query("DELETE FROM {bookmark} WHERE type = 'bead' AND asset = %d", $node->nid);
  db_query("DELETE FROM {recommend} WHERE type = 'bead' AND asset = %d", $node->nid);
  db_query("DELETE FROM {curriculum_topics_assets} WHERE  asset = %d", $node->nid);
  db_query("DELETE FROM {asset_tracking} WHERE asset_id = %d", $node->nid);
  db_query("DELETE FROM {mars_statistics} WHERE nid = %d", $node->nid);
}
/**
 *
 * Notification Email will Send to Bookmarked user, Recommended user, Co-author, Author, Associated Asset Authors
 *
 */
function notification_asset_delete($node) {
  global $user;
  // Check for Co-Author and Send Notification Mail
  if ($node->field_coauthor) {
    $coauthor = array();
    foreach($node->field_coauthor as $value) {
      // Mail will not send to Deleted user
      if ($value['uid'] != $user->uid && $value['uid']) {
        $user_name =   db_result(db_query("SELECT name FROM {users} WHERE uid=%d", $value['uid']));
        $temp_user_list = user_load(array('name' => trim($user_name)));
        $coauthor[$temp_user_list->uid] = $temp_user_list;
      }
    }
    if(is_array($coauthor) && (count($coauthor) > 0)){
      $subject = 'Your asset has been removed';
      $body = 'Your asset ' . $node->title . ' has been removed';
      privatemsg_mail_send($coauthor, $user, $subject, $body);
    }
  }
  // Check for Authors and Send Notification Mail
  // Mail will not send to Deleted user
  if ($node->field_author[0]['uid'] != $user->uid && $node->field_author[0]['uid']) {
    $user_name =   db_result(db_query("SELECT name FROM {users} WHERE uid=%d", $node->field_author[0]['uid']));
    $temp_user_list = user_load(array('name' => trim($user_name)));
    $author_list[$temp_user_list->uid] = $temp_user_list;
    $subject = 'Your asset has been removed';
    $body = 'Your asset ' . $node->title . ' has been removed';
    if(is_array($author_list) && (count($author_list) > 0)){
      privatemsg_mail_send($author_list, $user, $subject, $body);
    }
  }

  // Check for Associated Asset in Curriculum Topics
  $query = db_query("SELECT T.cid FROM {curriculum_topics_assets} TA INNER JOIN {curriculum_topics} T ON  T.topic_id = TA.topic_id WHERE TA.asset=%d", $node->nid);
  if (db_affected_rows()) {
    while ($curri_asso = db_fetch_object($query)) {
      $node_associated = node_load($curri_asso->cid);
      // Check for Associated Co-Author and Send Notification Mail
      if ($node_associated->field_coauthor) {
        $coauthor = array();
        foreach($node_associated->field_coauthor as $value) {
          // Mail will not send to Deleted user
          if ($value['uid'] != $user->uid && $value['uid']) {
            $user_name =   db_result(db_query("SELECT name FROM {users} WHERE uid=%d", $value['uid']));
            $temp_user_list = user_load(array('name' => trim($user_name)));
            $coauthor[$temp_user_list->uid] = $temp_user_list;
          }
        }
        if(is_array($coauthor) && (count($coauthor) > 0)){
          $subject = 'Your associated asset has been removed';
          $body = 'Your associated asset ' . $node->title . ' has been removed';
          privatemsg_mail_send($coauthor, $user, $subject, $body);
        }
      }
      // Check for Associated Authors and Send Notification Mail
      // Mail will not send to Deleted user
      if ($node_associated->field_author[0]['uid'] != $user->uid && $node_associated->field_author[0]['uid']) {
        $author_list = array();
        $user_name =   db_result(db_query("SELECT name FROM {users} WHERE uid=%d", $node_associated->field_author[0]['uid']));
        $temp_user_list = user_load(array('name' => trim($user_name)));
        $author_list[$temp_user_list->uid] = $temp_user_list;
        $subject = 'Your asset has been removed';
        $body = 'Your asset ' . $node->title . ' has been removed';
        if(is_array($author_list) && (count($author_list) > 0)){
          privatemsg_mail_send($author_list, $user, $subject, $body);
        }
      }
    }
  }
  // Notification Mail will send to Bookmarked Users
  $bookmark_query = db_query("SELECT uid FROM {bookmark} WHERE asset=%d", $node->nid);
  if (db_affected_rows()) {
    $arry_receipients = array();
    while ($bookmark_result = db_fetch_object($bookmark_query)) {
      $user_name =   db_result(db_query("SELECT name FROM {users} WHERE uid=%d", $bookmark_result->uid));
      $temp_user_list = user_load(array('name' => trim($user_name)));
      $arry_receipients[$temp_user_list->uid] = $temp_user_list;
    }
    $subject = 'Bookmarked asset has been removed';
    $body = 'Your bookmarked ' . $node->title . ' asset has been removed';
    if(is_array($arry_receipients) && (count($arry_receipients) > 0)){
      privatemsg_mail_send($arry_receipients, $user, $subject, $body);
    }
  }
  // Notification Mail will send to Recommeded users
  $recommend_query = db_query("SELECT to_uid FROM {recommend} WHERE asset=%d", $node->nid);
  if (db_affected_rows()) {
    $arry_receipients = array();
    while ($recommend_result = db_fetch_object($recommend_query)) {
      $user_name =   db_result(db_query("SELECT name FROM {users} WHERE uid=%d", $recommend_result->to_uid));
      $temp_user_list = user_load(array('name' => trim($user_name)));
      $arry_receipients[$temp_user_list->uid] = $temp_user_list;
    }
    $subject = 'Recommended asset has been removed';
    $body = 'Your Recommended ' . $node->title . ' asset has been removed';
    if(is_array($arry_receipients) && (count($arry_receipients) > 0)){
      privatemsg_mail_send($arry_receipients, $user, $subject, $body);
    }
  }
   //delete assignment related content while deleting playlist
  $query = db_query("SELECT id FROM {curriculum_topics_assets} WHERE asset = %d", $node->nid);
  if (db_affected_rows()) {
    while($row = db_fetch_object($query)) {
      db_query("DELETE FROM {assignment} WHERE st_id=%d", $row->id);
      db_query("DELETE FROM {assignment_assign} WHERE st_id=%d", $row->id);
      db_query("DELETE FROM {assignment_statistics} WHERE st_id=%d", $row->id);
    }
  }
   //delete the corresponding bookmarks and recommendations and Associated Curriculum Topics
  db_query("DELETE FROM {bookmark} WHERE asset = %d", $node->nid);
  db_query("DELETE FROM {recommend} WHERE asset = %d", $node->nid);
  db_query("DELETE FROM {curriculum_topics_assets} WHERE  asset = %d", $node->nid);
  db_query("DELETE FROM {asset_tracking} WHERE asset_id = %d", $node->nid);
  db_query("DELETE FROM {mars_statistics} WHERE nid = %d", $node->nid);
}


/**
 * Assign Messages
 *
 * for asset and curriculum we need to assign message
 *
 * @param $addedorremove
 *   It contains add or remove string
 *
 * @param $content
 *  It contains message content
 *
 * @param $coauthor_url
 *  it contains coauthor url
 *
 *  @param $node_title
 *   It contains node title
 *
 *  @param $uid
 *   It contains user id
 *
 * @return $assign_msg
 *  It returns assigned message
 *
 */
function privatemsg_assign_asset_message($addedorremove, $content, $coauthor_url, $node_title, $uid, $node_nid, $from_to = 'to') {
  $assign_msg = array();
  $assign_msg['subject'] = t('You have been !addedorremove as !content !from_to asset', array('!addedorremove' => $addedorremove,'!content' => $content, '!from_to' => $from_to));
  $assign_msg['body'] = t('You have been !addedorremove as !content !from_to asset, ' . l($node_title, 'node/' . $node_nid, array('html' => TRUE)) . ' by ' . create_eduauthor($uid) . '<br> Regards,<br> Edubridge Admin', array('!addedorremove' => $addedorremove, '!content'=>  $content, '!from_to' => $from_to));
  return $assign_msg;
}
/**
 *  Implementing the hook_popups().
 *
 */
function asset_popups () {
  // for asset edit content page... onlys
  return array( 'node/*/content' => array(
      '#edit-delete' => array(
        'additionalJavascript' => array(drupal_get_path('module', 'asset') .'/js/asset-info.js',
        ),
        'href'=>url('node/'.arg(1).'/delete'),
      )
    )
  );
}

/**
 * for create link with format list
 *
 * @param $create_link
 *   it contains create link
 *
 * @param $list
 *   it contains asset format list
 *
 * @return
 *  It returns html create list
 *
 */
function theme_create_content_list($create_link, $list) {
  $output = '<div class="title-bg reviews-title-bg"><span class="btn-center">' . $create_link . '</span><div id="asset-options-list" style="display: none;"><ul>';
  foreach($list as $value) {
    if ($value == 'quiz') {
      $output .= '<li>' . l(strtoupper($value), 'node/add/' . $value, array('attributes' => array('class' => 'popups', 'title'=> $value))) . '</li>';
    }
    else {
    $output .= '<li>' . l(strtoupper($value), 'node/add/asset/' . $value, array('attributes' =>  array('class' => 'modalframe-example-child modalframe-example-size[700,900]', 'title'=> $value))) . '</li>';
  }
  }
	$output .= '</ul> </div></div>';
  return $output;
}

/**
 * Implementation of hook_preprocess_page().
 *
 * @see theme_create_content_list().s
 */
function asset_preprocess_page(&$vars) {
  global $user;
  // My asset listing pages
  if(arg(1) == 'myassets'){
    // For creat asset link
    if (user_access('create asset content')) {
      if(module_exists('modalframe')) {
        modalframe_parent_js();
        drupal_add_js(drupal_get_path('module', 'modalframe_example') . '/modalframe_example.js');
      }
      $create_link = l('Create New Asset <span > ' . theme_image(drupal_get_path('theme', 'educationhub'). '/images/icons/drop-icon.png') . '</span>', 'node/add/asset/html', array('attributes' => array('class' => 'commnity_associate popups modalframe-example-child modalframe-example-size[700,900]'), 'html' => true));
      $quiz = user_access('create quiz')?'quiz':NULL;
      $list = array('html', 'pdf', 'image', 'video', $quiz);
      // Create asset link withs lists
      $vars['create_content_list'] = theme('create_content_list', $create_link, $list);
    }
  }
  // For comment edit pages
  if (arg(0) == 'comment' && arg(1) == 'edit') {
    $nid = db_result(db_query("SELECT nid FROM comments WHERE cid=%d", arg(2)));
    $node = node_load($nid);
  }
  // Load the nodes
  if (is_numeric(arg(1)) && (arg(0) == 'node' || arg(0) == "review_listing" )) {
    $node = node_load(arg(1));
  }
  if (function_exists('view_asset_curriculum_access')) {
    if (view_asset_curriculum_access($node, FALSE, FALSE, FALSE, TRUE) && arg(2) == NULL && $node->type == "asset" ) {
      if (!$node->field_published[0]['value']) {
        if ($node->body) {
          $vars['create_link'] = l('Publish Asset', "node/" . $node->nid . "/publish", array('attributes' => array('class' => 'create-button float-right publish-link popups-form-reload', 'on-popups-options' => '{updateSource:"final"}', 'title' => 'Publish Asset')));
        }
        else {
          $vars['create_link'] = l('Publish Asset', '#', array('attributes' => array('class' => 'float-right unpublish-link', 'title' => 'Please add content to publish this Asset'), 'external' => TRUE));
        }
      }
    }
  }

  $flag = 0;
  // check for co author
  if (isset($node->field_coauthor) && $node->type == 'asset') {
    // Check for coauthor
    if (function_exists("check_coauthor")) {
      $flag = check_coauthor($node->field_coauthor);
    }
  }
  $vars['close_image'] = l(theme_image(drupal_get_path('theme', 'educationhub'). '/images/icons/close_icon.png','close','close'),'',array('html'=>true));
  //edit end delete links for the owner
  // node author, author field, coauthor have rights to edit the assets
  $vars['edit'] = NULL;
  //check the average voting - if zero then dont display the stars
  if(module_exists('fivestar') && isset($node)) {
    $avg_vote = fivestar_get_votes('node', $node->nid);
    if(isset($avg_vote['average']['value']) > 0 && ($node->field_published[0]['value'] == 1 || ($node->status == 1 && $node->type == 'bead'))) {
      $vars['ratings'] = theme('fivestar_static', $avg_vote['average']['value']);
    }
  }
  // For stringable beads
  $stringable_bead = ($node->type == 'bead') ? beads_stringable_link($node->nid, $node->field_bead_seq_no[0]['value'], $node->field_source_id[0]['value'], TRUE) : NULL;
  if ($stringable_bead) {
    $vars['create_link'] =l('View Full Sequence', $stringable_bead, array('attributes' => array('class' => 'float-right', 'title' => 'View Full Sequence')));
  }
  // Back link in stringable beads
  if (arg(0) == "beads" && arg(1) == "stringable") {
    $vars['create_link'] =l('Back', $_SERVER['HTTP_REFERER'], array('attributes' => array('class' => 'float-right', 'title' => 'Back')));
  }
  //Unset Tabs content in Multichoice Question
  if($node->type == 'multichoice'){
    unset($vars['tabs']);
  }
}

/**
 * Implementation of hook_preprocess_node().
 *
 *
 */
function asset_preprocess_node(&$vars) {
  global $user, $base_url;
  //Adding Js.
  drupal_add_js(drupal_get_path('module', 'asset') . "/js/asset-info.js");
  if (function_exists("jquery_ui_add")) {
    jquery_ui_add(array('ui.widget', 'ui.mouse', 'ui.draggable', 'ui.droppable', 'ui.sortable'));
  }
  // To display the particular asset contents in their form - for example pdf in iframe, video in player -- starts here //
  if (($vars['node']->type == 'asset' || $vars['node']->type == 'bead') && is_null(arg(2))) {
    $vars['node_edit_link'] = NULL;
    $flag = 0;
    if (function_exists("delete_asset_curriculum_access") && delete_asset_curriculum_access($vars['node'], FALSE, FALSE, TRUE) && $vars['node']->type == 'asset') {
      $flag = 1;
      $vars['node_edit_link'] = $base_url . '/node/' . $vars['node']->nid . '/content';

    }
    if ($vars['node']->type == 'bead' && user_access('edit any bead content')) {
      $vars['node_edit_link'] = $base_url . '/node/' . $vars['node']->nid . '/edit';
    }

    if(isset($vars['node']->field_custom_file_upload[0]['filename'])) {
      $file_info = pathinfo($vars['node']->field_custom_file_upload[0]['filename']);
      $file_path = $vars['node']->field_custom_file_upload[0]['filepath'];
      $file_type = $file_info['extension'];
      $file_path_url =  urlencode($base_url . '/' . $file_path);
      //$vars['iframe_src'] = "http://docs.google.com/viewer?url=http%3A%2F%2Feducationhub.staging.acrossworld.com%2Fsites%2Fall%2Ffiles%2FThoufic%2520Experience.doc&embedded=true";
      if ($vars['node']->field_format[0]['value'] == 'PDF') {
        $vars['iframe_src'] = url($file_path);
      }
      elseif ($vars['node']->field_format[0]['value'] == 'DOCUMENT' || $vars['node']->field_format[0]['value'] == 'EXCEL' || $vars['node']->field_format[0]['value'] == 'PRESENTATION') {
        $vars['iframe_src'] = "http://docs.google.com/viewer?url=". $file_path_url . "&embedded=true";
      }
      
      elseif ($vars['node']->field_format[0]['value'] == 'IMAGE') {
        $vars['image'] = l(theme('imagecache', 'assetimage', $file_path, $vars['node']->field_custom_file_upload[0]['filename'], $vars['node']->field_custom_file_upload[0]['filename']), $file_path, array('html' => 'TRUE'));
      }
      elseif ($vars['node']->field_format[0]['value'] == 'VIDEO') {
        if ($_GET['preview'] == 'true') {
          $vars['video_link'] = 'Note: The Video attachments will not be shown on the preview pane. Please '. l('click here', 'node/' . $vars['node']->nid) . ' to view the original content.';
        }
        else {

          $image = url(drupal_get_path('theme', 'educationhub') . '/images/default_video.jpg');
          if (module_exists("flowplayer")) {
            $vars['video'] = theme('flowplayer', array(
                            'playlist' => array(array( 'url' => $image), array('url' => url($file_path),
                      // this is the SubRib file with captions info
                      // 'captionUrl' => $captions_file_path,
                             'autoPlay' => FALSE, // Turn autoplay off
                      ),
                  ),
                ));
          }
        }
      }
    }
    elseif (!isset($vars['node']->body)) {
      $vars['no_record'] = 'No content has been updated, Please click on edit link to update the content.';
    }
    if ($_GET['status'] != 'ajax' && $flag == 1) {
      $vars['tooltip_content'] = l('','#', array("attributes" => array("class" => "dd")));
    }
    //}
    //else {
    //  $vars['no_record'] = 'No file has been uploaded, Please click on edit link to upload the associated file';
    //}
  }

  //Preview line will show in Asset edit page.
  if($vars['node']->type == 'asset' && arg(2) == 'content'){
    //bring preview line in Asset edit page.
    $vars['preview_line'] = TRUE;
  }

  if ($vars['node']->type == 'quiz' && $_GET['preview'] == 'true') {
    $vars['quiz_link'] = 'Note: The Quiz will not be shown on the preview pane. Please '. l('click here', 'node/' . $vars['node']->nid) . ' to view the Quiz Page.';
  }
  $vars['asset_height'] = "570px";
  if ($_GET['preview'] == 'true') {
    $vars['asset_height'] = "230px";
  }
  //Bring Question node as editable for Author of the Question.
  if ($vars['node']->type == 'multichoice' && $vars['node']->uid == $user->uid) {
    if($_GET['status'] != 'ajax'){
      $vars['question_content_edit'] = l('','#', array("attributes" => array("class" => "dd")));
    }
    $vars['ques_edit_link'] = $base_url . '/node/' . $vars['node']->nid . '/edit';
  }
}


/**
 * Implementation of hook_messaging().
 */
function asset_messaging($op, $arg1 = NULL, $arg2 = NULL) {
  switch ($op) {
    case 'message groups':
      $info = array();
      return $info;
      break;
  }
}

function asset_fapi_validation_rules() {
  return array(
    'coauthor_validate' => array(
      'callback' => 'asset_coauthor_validation_rule',
      'error_msg' => t('enter valid co_author names.'),
    )
  );
}

function asset_coauthor_validation_rule($value) {
  $us = db_fetch_array(db_query("SELECT uid FROM {users} WHERE name = '%s'", $value));
  $ro = db_fetch_array(db_query("SELECT rid FROM {users_roles} WHERE uid = %d", $us['uid']));
  if(isset($us['uid']) && $ro['rid'] == 4){
    return FALSE;
  }
  else{
    return TRUE;
  }
}

function asset_clientside_validation_rule_alter(&$js_rules, $element, $context) {
  switch ($context['type']) {
    case 'fapi':
      if ($context['rule']['callback'] == 'asset_coauthor_validation_rule') {
        //removed & symbol from &$js_rules due to warning in log entry. Will commit soon.
        _asset_coauthor_validation($element['#name'], $element['#title'], $decimalpoint, $js_rules);
      }
    break;
  }
}

function _asset_coauthor_validation($name, $title, $decimalpoint, &$js_rules){
  drupal_add_js(drupal_get_path('module', 'assignment') . '/js/assignment_validation.js');
  $title = variable_get('clientside_validation_prefix', '') . $title . variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['auth_check'] = TRUE;
  $js_rules[$name]['messages']['auth_check'] = t('Please enter valid Author name for !field.', array('!field' => $title));
}


/**
 * Asset as pdf output
 *
 * @param - $node: Asset node object.
 *
 * @return
 *  Asset format -> Download Format(File)
 *  HTML -> PDF
 *  PDF -> PDF
 *  IMAGE -> IMAGE
 *  VIDEO -> VIDEO
 *  AUDIO -> AUDIO
 *
 */
function asset_overview_pdf($node) {
  global $base_url;
  //Check if the Asset format is HTML, then we need to convert it into PDF format, else the remaining format will download as it is.
  if ($node->field_format[0]['value'] == 'HTML') {
    $tcpdf_path = drupal_get_path('module', 'curriculum') .'/tcpdf';
    require_once($tcpdf_path .'/config/lang/eng.php');
    require_once($tcpdf_path .'/tcpdf.php');

    // Extend the TCPDF class to create custom Header and Footer
    class MYPDF extends TCPDF {
      //Page header
      public function Header() {
        // Logo
        $tcpdf_path = drupal_get_path('module', 'curriculum') .'/tcpdf';
        $image_file = $tcpdf_path.'/images/edu.jpg';
        //$this->Image($image_file, '10', '10', '190', '', '', '', 'T', FALSE, 300, '', FALSE, FALSE, 0, FALSE, FALSE, FALSE);
      }

      // Page footer
      public function Footer() {
        // Position at 15 mm from bottom
        $this->SetY(-15);
        // Set font
        $this->SetFont('helvetica', '', 8);
        // Page footer
        $html = '&copy; 2012. Edubridge. All Rights Reserved.';
        // print a block of text using Write()
        $this->writeHTML($html, TRUE, FALSE, FALSE, FALSE, '');
      }
    }

    // create new PDF document
    $pdf = new MYPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);


    $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

    // set default monospaced font
    $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

    //set margins
    $pdf->SetMargins(PDF_MARGIN_LEFT, 40, PDF_MARGIN_RIGHT);
    //$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
    $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

    //set auto page breaks
    $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

    //set image scale factor
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

    //set some language-dependent strings
    $pdf->setLanguageArray($l);

    // set font
    $pdf->SetFont('trebuchet', ' ', '');
    // set Axis
    $pdf->SetY(500);
    // add a page
    $pdf->AddPage();

    // Check for Co Author if found display Co Author in the cover page

    if($node->field_coauthor) {
      $flag = 0;
      foreach($node->field_coauthor as $users) {
         $user_authorlinks[] = $users['uid']?theme('username_underline', create_eduauthor($users['uid'], NULL, TRUE)):'';
      }
      $coauthor = $user_authorlinks?implode(', ' ,$user_authorlinks):'';
    }

    // Check for Reviewes if found display reviewers in the cover page
    if ($node->field_openforreview[0]['value'] == 1) {
      $output['open_to_review'] = t("Yes");
      $reviewers = $node->field_reviewers;
      foreach($reviewers as $users) {
        $user_links[] = theme('username_underline', create_eduauthor($users['uid'], NULL, TRUE));
      }
      $reviewers = $user_links?implode(', ' ,$user_links):'';
    }
  $node_author = create_eduauthor($node->uid, NULL, TRUE);
  // Set Cover Page Design
  $html = <<<EOD
              <table width="520">
                <tr>
                  <td height="105">&nbsp;</td>
                </tr>
                <tr>
                  <td style="text-align:left; font-size:70px;color:#ed6500;">$node->title</td>
                </tr>
                <tr>
                  <td style="text-align:left; color:#595959;">Author: <span style="color:#9d402b; text-decoration:underline;">$node_author</span></td>
                </tr>
EOD;
  if ($coauthor) {
    $html .= <<<EOD
        <tr>
          <td style="text-align:left; color:#595959;">Co-Author: $coauthor</td>
        </tr>
EOD;
  }
  if (isset($reviewers)) {
    $html .= <<<EOD
        <tr>
          <td style="text-align:left; color:#595959;">Reviewers: $reviewers</td>
        </tr>
EOD;
  }
  $html .= <<<EOD
            </table>
EOD;
  // print a block of text using Write()
  $pdf->writeHTML($html, TRUE, FALSE, TRUE, FALSE, '');

  //Description of an HTML Asset.
  if (isset($node->field_content[0][value])) {
    // Add a page
    $pdf->AddPage();
    $pdf->Bookmark("Description", 0, 0, '', 'B', array(0,64,128));
     $html = <<<EOD
      <span  style="font-size:60px; color:#26556a; font-weight:bold;">Description</span>
EOD;
    $html .= '<p><b>' . $node->field_content[0][value] . '</b></p><br>';
    $pdf->writeHTML($html, TRUE, FALSE, TRUE, FALSE, '');
  }

    // Add a page
    $pdf->AddPage();

  //Node Body of an HTML Asset
    if ($node->body) {
      $htm = <<<EOD
              <table width="525">
                <tr>
                  <td><span  style="font-size:50px; color:#26556a; font-weight:bold;">Content</span></td>
                </tr>
                </table>
EOD;
      //$h .= preg_replace('#(<[a-z ]*)(style=("|\')(.*?)("|\'))([a-z ]*>)#', '\\1\\6', $node->body);
      //$ht .= preg_replace('#(<[a-z ]*)(size=("|\')(.*?)("|\'))([a-z ]*>)#', '\\1\\6', $h);
      //$htm .= preg_replace('#(<[a-z ]*)(class=("|\')(.*?)("|\'))([a-z ]*>)#', '\\1\\6', $ht);



      $html = preg_replace("/<(?!table|img)([a-z][a-z0-9]*)[^>]*?(\/?)>/i",'<$1$2>', $node->body);
      $htm .= '<div style="font-size:40px !important;">'.$html.'</div>';
      $pdf->writeHTML($htm, TRUE, TRUE, TRUE, FALSE, '');
      //$pdf->writeHTML($html_out, TRUE, TRUE, TRUE, FALSE, '');

    }

  //Download as PDF file.
    //PDF Name format as Asset NodeName.pdf
    $output_file = 'Asset ' . $node->title . '.pdf';
    $pdf->Output($output_file, 'D');
  }
  else { // Remaining format download as it is.

    $file_info = pathinfo($node->field_custom_file_upload[0]['filename']);
    $file_path = $node->field_custom_file_upload[0]['filepath'];
    $file_type = $file_info['extension'];

    //PDF Asset
    if($node->field_format[0]['value'] == 'PDF'){
      $content_type = "application/pdf";
    }
    //IMAGE Asset
    elseif($node->field_format[0]['value']=='IMAGE'){
      $content_type = "image";
    }
    //VIDEO Asset
    elseif($node->field_format[0]['value']=='VIDEO'){
      $content_type = "video";
    }
    //AUDIO Asset
    elseif($node->field_format[0]['value']=='AUDIO'){
      $content_type = "audio";
    }
    elseif($node->field_format[0]['value'] == 'DOCUMENT'){
      if ($file_info['extension'] == 'docx' || $file_info['extension'] == 'DOCX') {
        $content_type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
      }
      else {
        $content_type = "application/msword";
      }
    }
    elseif($node->field_format[0]['value'] == 'EXCEL'){
      if ($file_info['extension'] == 'xlsx' || $file_info['extension'] == 'XLSX') {
        $content_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet ";
      }
      else {
        $content_type = "application/excel";
      }
    }
    elseif($node->field_format[0]['value'] == 'PRESENTATION'){
      if ($file_info['extension'] == 'pptx' || $file_info['extension'] == 'PPTX') {
        $content_type = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
      }
      else {
        $content_type = "application/powerpoint";
      }
    }
    if($node->field_custom_file_upload[0]['filename']) {
      $file_name = str_replace(" ",  "_", $node->field_custom_file_upload[0]['filename']);
      //echopre($file_name);
      //echopre(mime_content_type($file_name));exit;
      header('Content-disposition: attachment; filename="'.$file_name.'"');
      header('Content-type:' . $content_type);
      //If file name having space we need to change that to %20 only we can download that file.
      $file_path = str_replace(" ", "%20", $file_path);
      readfile($base_url . '/' . $file_path);
      exit;
    }
    else {
      drupal_set_message("You can't download any " . $node->field_format[0]['value']  . " file because yet any file has not been uploaded.", $type = 'status', $repeat = TRUE);
      drupal_goto('node/' . $node->nid);
    }
  }
}



/**
 * for create link with format list
 *
 * @param $create_link
 *   it contains create link
 *
 * @param $list
 *   it contains asset format list
 *
 * @return
 *  It returns html create list
 *
 */
function theme_beads_stringable_title($list) {
  $output = '<div class=" sidebar-beadtitle"><h2>' . t('Bead Topics') . '</h2><div class="bead-scroll"><ul class="bead-title-list">';
  if ($list) {
    foreach($list as $value) {
      $class_active = NULL;
      if (arg(2) == $value['nid']) {
        $class_active = "bead-active";
      }
      $output .= '<li class="' . $class_active . '" id=' . $value['nid'] . '>' . $value['node_title'] . '</li>';
    }
  }
	$output .= '</ul></div></div>';
  return $output;
}
/**
 * Implementing hook_quiz_finished().
 *
 */
function asset_quiz_finished($quiz, $score, $rid) {
  global $user;
  // While completing the quiz the assignment table will get updated
  custom_quiz_finish($quiz);
}

/**
 * Custom function to update the Quiz assignment status from Pending to Completed.
 * @param
 * $quiz - Node object of Quiz which is going to be completed.
 *
 * @result
 * Quiz status changed from Pending to Completed, and a mail will be send to Teacher.
 *
 */
function custom_quiz_finish($quiz)  { 
  global $user;
  // While completing the quiz the assignment table will get updated
  $result = db_query("SELECT a.st_id, a.from_uid, a.created, a.aid FROM {assignment} a INNER JOIN {assignment_assign} aa
                                     ON a.st_id = aa.st_id WHERE aa.status = %d AND a.link = %d AND a.to_uid = %d", 1, $quiz->nid, $user->uid);
  
  if(db_affected_rows()) {
    while ($row = db_fetch_array($result)) {
      $remarks = "Quiz Completed";
      db_query('UPDATE {assignment_assign} SET status = %d, remarks_time=%d, remarks="%s" WHERE st_id = %d AND uid = %d', 2, time(), $remarks, $row['st_id'], $user->uid);
    
    // start:: for user points calculation
    // user  defined hook: hook_eb_points;
      $row['type']  = 'quiz_assignment';
      module_invoke_all('eb_points', 'after save', $row);
    // stop
    
    //clear the cache
      cache_clear_all("assignment_completed_listing:uid:" . $user->uid . ":", "cache_eb", TRUE);
      cache_clear_all("assignment_listing:uid:" . $user->uid . ":", "cache_eb", TRUE);
      cache_clear_all("assignment_basket:uid:" . $user->uid . ":", "cache_eb", TRUE);
      cache_clear_all("playlist_report_list:uid:" . $row['from_uid'] . ":", "cache_eb", TRUE);
      // for mobile clear cache
      cache_clear_all("assignment_mobile:uid:" . $user->uid . ":", "cache_eb", TRUE);
      cache_clear_all("completed_assignment_mobile:uid:" . $user->uid . ":", "cache_eb", TRUE);
      $temp_user_list = user_load($row['from_uid']);
      // Assigning the users id to an array.
      $arry_receipients[$temp_user_list->uid] = $temp_user_list;
      //construct email to teacher after the completion of assignment of the student. Following function written in eb_others_common.inc
      privatemsg_mail_send($arry_receipients, $user, t('Assignment ' . $quiz->title . ' has been completed successfully'), 'Completed');
    }
  }
}