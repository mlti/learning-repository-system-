<?php
// $Id: eb_others.module,v 1 2010/10/01 13:17:00 bala Exp $

module_load_include('inc', 'eb_others', 'includes/eb_others_common');

/*Define Category *starts*/
define('KEYWORDS', 4);
define('AUTHOR', 3);
define('LEVEL', 5);
define('ASSET_CATEGORY', 6);
define('TAGS', 7);
define('ACADEMIC_LEVEL', 5);
define('SUBJECT', 2);
define('CLASS_GRADE', 4);
define('DISCIPLINE', 3);
define('BOOKMARK_LISTING_PAGER_ID', 1);
define('BOOKMARK_BASKET_PAGER_ID', 2);
define('RECOMMEND_LISTING_PAGER_ID', 3);
define('RECOMMEND_BASKET_PAGER_ID', 4);
define('ASSET_LISTING_PAGER_ID', 5);
define('ASSET_BASKET_PAGER_ID', 6);
define('ASSIGNMENT_LISTING_PAGER_ID', 7);
define('ASSIGNMENT_LISTING_COMPLETED_PAGER_ID', 8);
define('ASSIGNMENT_BASKET_PAGER_ID', 9);
define('PLAYLIST_LISTING_PAGER_ID', 10);
define('PLAYLIST_BASKET_PAGER_ID', 11);
define('MARS_LISTING_PAGER_ID', 12);
define('MARS_BASKET_PAGER_ID', 13);
define('COMMUNITY_LISTING_PAGER_ID', 14);
define('COMMUNITY_BASKET_PAGER_ID', 15);
define('PLAYLIST_REPORT_LIST_PAGER_ID', 16);
/*Define Category *ends*/

/**
 * Implementation of hook_init().
 *
 */
function eb_others_init() {
  global $base_url;

  drupal_add_js(array(
    'eb_others' => array(
      'loadingImg' => url(drupal_get_path("module", "eb_others") . "/" . "ajax-loader.gif"),
    )
  ), 'setting');

  drupal_add_js(array(
    'eb_others' => array(
      'close_image' => url(drupal_get_path("theme", "educationhub") . "/images/icons/close_icon.png"),
    )
  ), 'setting');
  // get node object
  if (arg(0) == "node" && is_numeric(arg(1))) {
    $node = node_load(arg(1));
  }

  if(is_numeric(arg(1)) && ($node->type == 'asset' || $node->type == 'curriculum' || $node->type == 'reviews' || $node->type == 'discussion' || $node->type == 'community_interest_group' || $node->type == 'quiz') || (arg(0) == "assignment" || arg(1) == "list" || arg(4) == "groups")) {
    $popups = popups_get_popups(TRUE);
  }
}


/**
 * Implements hook_perm().
 *
 */
function eb_others_perm() {
  return array('administer activities', 'update taxonomy pool', 'manage campus');
}

/**
 * Implements hook_menu().
 */
function eb_others_menu() {
  $items = array();
  $items['admin/activities'] = array(
    'title' => 'Edubridge Management',
    'description' => 'Get edubrdige user activities.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer activities'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/activities/list'] = array(
    'title' => 'User Activity Summary Report',
    'description' => 'Get edubrdige user activities.',
    'page callback' => 'activities_management',
    'access arguments' => array('administer activities'),
  );
  $items['node/%node/delete/confirm'] = array(
   'page callback' => 'delete_all',
   'page arguments' => array(1),
   'access callback' => 'node_access',
   'access arguments' => array('delete', 1),
   'file' => 'node.pages.inc',
   'file path' => drupal_get_path('module', 'node'),
   'type' => MENU_CALLBACK,
  );
  // todo : For future purpose
 /* $items['score/policy'] = array(
   'title' => 'Edubridge Score Policy',
   'page callback' => 'user_score_policy',
   'access arguments' => array('view own userpoints'),
   'file' => 'includes/eb_others.inc',
  ); */

 // For edit playlist and asset  content page
  $items['node/%node/content'] = array(
    'title' => 'Content',
    'page callback' => 'eb_edit_content',
    'page arguments' => array(1),
    'access callback' => 'view_asset_curriculum_access',
    'access arguments' => array(1, FALSE, FALSE, TRUE),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_CALLBACK,
    'weight' => -1,
  );
  $items['node/%node/publish'] = array(
    'title callback' => 'publish_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publish_node_form', 1),
    'access callback' => 'view_asset_curriculum_access',
    'access arguments' => array(1, FALSE, FALSE, FALSE, FALSE, TRUE),
    'file' => 'eb_others.inc',
    'file path' => drupal_get_path('module', 'eb_others') . '/includes',
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/publish/confirm'] = array(
    'page callback' => 'publish_node_confirm',
    'page arguments' => array(1),
    'access callback' => 'view_asset_curriculum_access',
    'access arguments' => array(1, FALSE, FALSE, FALSE, FALSE, TRUE),
    'file' => 'eb_others.inc',
    'file path' => drupal_get_path('module', 'eb_others') . '/includes',
    'type' => MENU_CALLBACK,
  );
  // Removal Confirm form callback for Co Authors
  $items['node/%node/custom/removal/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coauthor_reviewer_remove_form', 4),
    'access callback' => 'view_asset_curriculum_access',
    'access arguments' => array(1, FALSE, FALSE, FALSE, TRUE),
    'weight' => -1,
  );
  // Removal callback for Co Authors
  $items['node/%node/removed/%'] = array(
    'page callback' => 'coauthor_removed',
    'page arguments' => array(1),
    'access callback' => 'view_asset_curriculum_access',
    'access arguments' => array(1, FALSE, FALSE, FALSE, TRUE),
    'weight' => -1,
  );
  //
  $items['admin/settings/update_taxo_pool'] = array(
    'title' => 'Update Taxonomy Pool',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('update_taxonomy_pool_form'),
    'access arguments' => array('update taxonomy pool'),
    'file' => 'eb_others.inc',
    'file path' => drupal_get_path('module', 'eb_others'). '/includes',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['page-not-found'] = array(
    'page callback'      => 'page_not_found',
    'access callback'    => TRUE,
    'type'               => MENU_CALLBACK,
  );
  return $items;
}
/**
 * function to return the html output of page not found
 */
function page_not_found() {


  return '';
}

function activities_management() {
  drupal_goto('admin/management/list');
}

/**
 * To display custom Title
 *
 * @param $node
 *   It contains node object
 * @return
 *  It return custom title
 */
function publish_title($node) {
  if ($node->type == 'curriculum') {
    return "Publish Playlist";
  }
  elseif ($node->type == 'asset') {
    return "Publish Asset";
  }
  return false;
}
/**
 * Implementation of hook_theme().
 */
function eb_others_theme() {
  return array(
    'edit_content_block' => array(
      'arguments' => array('results' => NULL),
    ),
    'user_score_policy' => array(
      'arguments' => array('results' => NULL),
    ),
    'cck_teaser' => array(
      'template' => 'templates/cck-teaser',
      'arguments' => array('results' => NULL),
    ),
    'autocomplete_user_name' => array(
      'arguments' => array('user_details' => NULL),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function eb_others_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if($form_id != 'page_node_form') {
    $form['buttons']['preview']['#prefix'] = '<div style ="display:none">';
    $form['buttons']['preview']['#suffix'] = '</div>';
  }
  // Quiz questions might want to add a cancel button.
  // Adding a class for Cancel link button design.
  if (isset($form['#cancel_button'])) {
    $form['buttons']['cancel']['#value'] = l(t('Cancel'), $form['#redirect'], array('attributes' => array('class' => 'create-button')));
  }

  switch ($form_id) {
    //Hide the Institute field
    case 'asset_node_form':
    case 'curriculum_node_form':
    case 'multichoice_node_form':
      $form['#after_build'] = array('add_label_multichoice_form');
      break;
    case 'quiz_questions_form':
      $form['#after_build'] = array('add_label_questions_form');
      break;
    case 'quiz_node_form':
      $form['#after_build'] = array('add_label_availability');
      break;
    case 'quiz_results_manage_results_form':
      $form['#after_build'] = array('add_label_manage_results');
      break;
    case 'community_interest_group_node_form':
    case 'discussion_node_form':
      //@ check if user has manage content access
      if(!user_access('administer users')){
        $form['field_institute']['#prefix'] = '<div style ="display:none">';
        $form['field_institute']['#suffix'] = '</div>';
      }
      break;

    case 'contact_mail_page':
      drupal_set_title('Feedback');
      break;
    case 'node_type_form':
      if (isset($form['identity']['type'])) {
        $form['clone_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Clone Settings'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#description' => t('To enable Clone for this content, enable checkbox below.'),
        );
        $form['clone_settings']['clone'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable Clone for nodes.'),
          '#default_value' => variable_get('clone_'. $form['#node_type']->type, 0),
          '#return_value' => 1,
        );
        $form['#submit'][] = 'clone_node_type_form_submit';
      }
      break;

    case 'remove_confirmation_form':
      $form['actions']['cancel'] = array(
        '#type' => 'button',
        '#weight' => 70,
        '#value' => t('No'),
        );

      $form['actions']['#prefix'] = '<div class="button-main">';
      $form['actions']['#suffix'] = '</div>';
      //$form['actions']['cancel']['#prefix'] = '<span class="btn-center">';
      //$form['actions']['cancel']['#suffix'] = '</span>';
      break;
    case 'decline_confirmation_form':
      $form['actions']['#prefix'] = '<div class="button-main">';
      $form['actions']['#suffix'] = '</div>';
      $form['actions']['cancel'] = array(
        '#type' => 'button',
        '#weight' => 70,
        //'#attributes' => array('onClick' => 'location.replace("'. $redirect_path .'"); '),
        '#value' => t('No'),
        );
      //$form['actions']['cancel']['#prefix'] = '<span class="btn-center">';
      //$form['actions']['cancel']['#suffix'] = '</span>';
      break;
    case 'node_configure':
      $form['teaser_length'] = array(
        '#type' => 'select',
        '#title' => t('Length of trimmed posts'),
        '#default_value' => variable_get('teaser_length', 600),
        '#options' => array(0 => t('Unlimited'), 200 => t('200 characters'), 300 => t('300 characters'),400 => t('400 characters'), 600 => t('600 characters'),
          800 => t('800 characters'), 1000 => t('1000 characters'), 1200 => t('1200 characters'), 1400 => t('1400 characters'),
          1600 => t('1600 characters'), 1800 => t('1800 characters'), 2000 => t('2000 characters')),
        '#description' => t("The maximum number of characters used in the trimmed version of a post. Drupal will use this setting to determine at which offset long posts should be trimmed. The trimmed version of a post is typically used as a teaser when displaying the post on the main page, in XML feeds, etc. To disable teasers, set to 'Unlimited'. Note that this setting will only affect new or updated content and will not affect existing teasers.")
);
      break;
    case 'node_delete_confirm':
      // For group for options
      unset($form['verb']);
      $form['actions']['cancel']['#prefix'] = '<span class="btn-center">';
      $form['actions']['cancel']['#suffix'] = '</span>';
      // Generic delete confirmation message

      drupal_set_title(teaser_nodes($form['#parameters'][2]->title, NULL, NULL, 40, TRUE));
      //drupal_set_title('tets');
      $redirect_path = NULL;
      // For currciulum delete done in popup.. redirect path
      if ($form['#parameters'][2]->type == 'curriculum') {
        // text content for delete subject
        //$type_name = ucwords($form['#parameters'][2]->type);
        $type_name = 'Playlist';
        $redirect_path = 'bridge/mycurriculum';
      }
      elseif ($form['#parameters'][2]->type == 'asset' || $form['#parameters'][2]->type == 'quiz' ) {
        //if(module_exists('modalframe')) {
        //  modalframe_child_js();
        //}
        // For asset delete done in popup.. redirect path
        // text content for delete subject
        $type_name = ucwords($form['#parameters'][2]->type);
        $redirect_path = 'bridge/myassets?del_title=success';
      }
      elseif ($form['#parameters'][2]->type == 'bead') {
        // For asset delete done in popup.. redirect path
        // text content for delete subject
        $type_name = ucwords($form['#parameters'][2]->type);
        $redirect_path = 'bridge/myassets?del_title=success';
      }
      elseif ($form['#parameters'][2]->type == 'discussion') {
        // For Discussion delete done in popup.. redirect path
        // text content for delete subject
        $type_name = ucwords($form['#parameters'][2]->type);
        $redirect_path = 'node/' . array_shift($form['#parameters'][2]->og_groups);
      }
      elseif ($form['#parameters'][2]->type == 'reviews') {
        // For Reviews delete done in popup.. redirect path
        // text content for delete subject
        drupal_set_title('Reviews');
        $type_name = ucwords($form['#parameters'][2]->type);
        $redirect_path = 'node/' . $form['#parameters'][2]->field_review_reference[0]['nid'];
      }
      elseif ($form['#parameters'][2]->type == 'community_interest_group') {
        // For Community interest group delete done in popup.. redirect path
        // text content for delete subject
        $type_name = 'Community';
        $redirect_path = 'communities/list?msg=success';
      }
      elseif ($form['#parameters'][2]->type == 'bead') {
        // For Community interest group delete done in popup.. redirect path
        // text content for delete subject
        $type_name = 'Bead';
      }
      else {
        $type_name = $form['#parameters'][2]->type;
      }
      $form['description']['#value'] =  t("Are you sure you want to delete this !type_name?", array('!type_name' => $type_name));
      $form['description']['#prefix'] = '<div class="result"><div class="confirm-text">';
      $form['description']['#suffix'] = '</div></div>';
      $form['actions']['#prefix']= '<div class="button-main">';
      $form['actions']['#suffix'] = '</div>';
      $form['actions']['submit']['#value'] = 'Yes';
      //$form['actions']['cancel']['#value'] = l('No', 'node/' . $form['#parameters'][2]->nid );
      //$form['actions']['cancel']['#prefix'] = '<span class="btn-center">';
      //$form['actions']['cancel']['#suffix'] = '</span>';
      //$form['#submit'][] = 'node_delete_modal_close_submit';
      $form['actions']['cancel'] = array(
        '#type' => 'button',
        '#weight' => 70,
        //'#attributes' => array('onClick' => 'location.replace("'. $redirect_path .'"); '),
        '#value' => t('No'),
        );

      // to pass node id and redirect path
      $form['node_id']  = array(
       '#type' => 'hidden',
       //'#value' => $form['#parameters'][2]->nid,
       '#value' => arg(1),
      );
      $form['redirect_path'] = array(
       '#type' => 'hidden',
       '#value' => trim($redirect_path),
      );
      $form['#redirect'] = $redirect_path;
      break;
    case 'coauthor_reviewer_remove_form':
       $form['actions']['cancel'] = array(
        '#type' => 'button',
        '#weight' => 70,
        '#value' => t('No'),
        );
      break;

  }
}

function add_label_availability($form, &$form_state){
  $form['quiz_availability']['quiz_open']['year']['#prefix'] = '<label for="edit-quiz-open-year" class="element-invisible">Select Year</label>';
  $form['quiz_availability']['quiz_open']['month']['#prefix'] = '<label for="edit-quiz-open-month" class="element-invisible">Select Month</label>';
  $form['quiz_availability']['quiz_open']['day']['#prefix'] = '<label for="edit-quiz-open-day" class="element-invisible">Select Day</label>';
  $form['quiz_availability']['quiz_close']['year']['#prefix'] = '<label for="edit-quiz-close-year" class="element-invisible">Select Year</label>';
  $form['quiz_availability']['quiz_close']['month']['#prefix'] = '<label for="edit-quiz-close-month" class="element-invisible">Select Month</label>';
  $form['quiz_availability']['quiz_close']['day']['#prefix'] = '<label for="edit-quiz-close-day" class="element-invisible">Select Day</label>';
  return $form;
}

function add_label_questions_form($form, &$form_state){
  $form['question_list']['browser']['table']['filters']['all']['#prefix'] = '<label for="edit-browser-table-filters-all" class="element-invisible">Check All</label>';
  $form['question_list']['browser']['table']['filters']['title']['#prefix'] = '<label for="edit-browser-table-filters-title" class="element-invisible">Title</label>';
  $form['question_list']['browser']['table']['filters']['type']['#prefix'] = '<label for="edit-browser-table-filters-type" class="element-invisible">Type</label>';
  $form['question_list']['browser']['table']['filters']['changed']['#prefix'] = '<label for="edit-browser-table-filters-changed" class="element-invisible">Changed</label>';
  $form['question_list']['browser']['table']['filters']['name']['#prefix'] = '<label for="edit-browser-table-filters-name" class="element-invisible">User Name</label>';
  $form['question_list']['browser']['table']['#header'][0]['data'] = 'Checkbox';
  $form['question_list']['browser']['table']['#header'][0]['class'] = 'quiz-gray-header element-invisible';
  return $form;
}

function add_label_multichoice_form($form, &$form_state){
  $form['alternatives'][0]['correct']['#prefix'] = '<label for="edit-alternatives-0-correct" class="element-invisible">Correct</label>';
  $form['alternatives'][0]['answer']['#prefix'] = '<label for="edit-alternatives-0-answer" class="element-invisible">Answer</label>';
  $form['alternatives'][1]['correct']['#prefix'] = '<label for="edit-alternatives-1-correct" class="element-invisible">Correct</label>';
  $form['alternatives'][1]['answer']['#prefix'] = '<label for="edit-alternatives-1-answer" class="element-invisible">Answer</label>';
  return $form;
}

function add_label_manage_results($form, &$form_state){
  $form['update']['bulk_action']['#prefix'] = '<label for="edit-bulk-action" class="element-invisible">Update Options</label>';
  $form['table']['filters']['all']['#prefix'] = '<label for="edit-table-filters-all" class="element-invisible">Check All</label>';
  $form['table']['filters']['name']['#prefix'] = '<label for="edit-table-filters-name" class="element-invisible">Name</label>';
  $form['table']['filters']['started']['#prefix'] = '<label for="edit-table-filters-started" class="element-invisible">Started</label>';
  $form['table']['filters']['finished']['#prefix'] = '<label for="edit-table-filters-finished" class="element-invisible">Finished</label>';
  $form['table']['filters']['score']['#prefix'] = '<label for="edit-table-filters-score" class="element-invisible">Score</label>';
  $form['table']['filters']['evaluated']['#prefix'] = '<label for="edit-table-filters-evaluated" class="element-invisible">Evaluated</label>';
  return $form;
}


/**
 * Implementation of hook_bloack
 * @param $op
 * @param $delta
 * @return block data
 */
function eb_others_block($op = 'list', $delta = 0) {
  global $user, $base_url;
  if ($op == 'list') {
    $blocks[0]['info'] = t('Follow us');
    $blocks[1]['info'] = t('Global Study Group');
    $blocks[2]['info'] = t('Community Events');
    $blocks[3]['info'] = t('Community Discussions');
    $blocks[4]['info'] = t('Community Threads');
    $blocks[5]['info'] = t('Custom User Login');
    $blocks[5]['visibility'] = 2;
    $blocks[5]['pages'] = "<?php if((((arg(0) == 'user' && arg(1) == 'register') || arg(0) == 'user' && arg(1) == 'login') || (arg(0) == 'user' && arg(1) == 'password') || (arg(0) == 'user' && arg(1) == '')) && $user->uid == 0) {
  return FALSE;} else { return TRUE; } ?>";
    
    return $blocks;
  }
  if ($op == 'view') {
    switch ($delta) {
      case 0:
        // For footer follow us link
        $block['subject'] = t('');
        $block['content'] = follow_us();
      break;
      case 1:
      $node = custom_node_load();
      // For footer follow us link
      if (arg(0) == "comment" && arg(1) == "edit") {
       $query = db_result(db_query("SELECT nid FROM comments WHERE cid=%d", arg(2)));
       $node->type = db_result(db_query("SELECT type FROM {node} WHERE nid=%d", arg(1)));
      }
      if ($node->type == "community_interest_group" || $node->type == 'discussion' || (arg(0) == "node" && arg(1) == "add" && ($node->type == "community-interest-group"  || arg(2) == "discussion")) || (arg(0) == "communities" && arg(1) == "list") || (arg(0) == "collaboration" && arg(1) == "globalstudygroup") ||  (arg(0) == "og" && arg(1) == "users")) {
        $block['subject'] = t('');
        $block['content'] = bridge_global();
      }
      break;
      case 2:
        $block['subject'] = t('Community Events');
        $block['content'] = community_events();
      break;
      case 3:
        $block['subject'] = t('Community Discussions');
        $block['content'] = community_discussions();
      break;
      case 4:
        $block['subject'] = t('Community Threads');
        $block['content'] = community_threads();
      break;
      case 5:
        $block['subject'] = t('Custom User Login');
        $block['content'] = custom_user_login();
      break;
    }
   return $block;
  }
}

function community_events() {
  print  l(theme_image(drupal_get_path('theme', 'educationhub'). '/images/icons/events.gif', NULL, NULL,NULL, FALSE),'community_discussion',array('html' => TRUE));
}

function community_discussions() {
  print  l(theme_image(drupal_get_path('theme', 'educationhub'). '/images/icons/search-groups.gif', NULL, NULL,NULL, FALSE),'community_thread',array('html' => TRUE));
}

function community_threads() {
  print  l(theme_image(drupal_get_path('theme', 'educationhub'). '/images/icons/community_thread.gif', NULL, NULL,NULL, FALSE),NULL,array('html' => TRUE));
}
function custom_user_login() {
  print drupal_get_form('user_login_block');
}

/**
 * Implementation of hook_token_list() for og specific tokens
 */
function eb_others_token_list($type = 'all') {
  if ($type == 'node' || $type == 'all') {
    $tokens['node']['cg-name'] = t('Title of course group');
    $tokens['node']['cg-id'] = t('ID of top group');
    $tokens['node']['cg-type'] = t("Type of course group");
    $tokens['node']['cgalias'] = t("URL alias for the course group.");

    $tokens['node']['asset-category'] = t('Title of asset');
    $tokens['node']['asset-categoryalias'] = t("URL alias for the asset.");

    $tokens['node']['c-name'] = t('Title of Course');
    $tokens['node']['c-id'] = t('ID of Course');
    $tokens['node']['c-type'] = t("Type of Course");
    $tokens['node']['c'] = t("URL alias for the Course.");
    return $tokens;
  }
}

/**
 *Implemantation of hook_menu_alter()
 *Overriding default actions - view/add/edit/delete - for curriculum, course_group, reviews content types
 *For all other content types doing normal action
 */
function eb_others_menu_alter(&$items) {

  $items['myuserpoints']['page callback'] = 'userpoints_list_my_userpoints_custom';
  $items['user/%user/view']['title'] = '';

  //Change the Title of Quiz View, Take Tab.
  $items['node/%node/view']['title callback'] = 'quiz_view_title_change';
  $items['node/%node/view']['title arguments'] = array(1);
  $items['node/%node/take']['title'] = 'Take Quiz';
  //Change Manage Question order.
  $items['node/%node/questions']['weight'] = 0;

}

/**
 * Custom Title change function
 */
function quiz_view_title_change($node){
  if ($node->type == 'quiz') {
    return 'Quiz Info';
  }
  else {
    return 'View';
  }
}
/**
 * Implementation of hook_nodeapi().
 */
function eb_others_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'view':
      switch ($node->type) {
        //@todo: campus admin have only rights to view institute details
        //case 'institute':
        //  // for campus admin user only have rights to view and edit the institution details
        //  if (!user_access('manage campus')) {
        //    drupal_access_denied();
        //  }
        //  break;
        case 'truefalse':
         if (arg(2) != 'take') {
            $node->content['question']['#value'] = '<div class="clearfix quiz-one-line"><div class="quiz-question-title">Question Title :</div>' . $node->content['question']['#value'] . '</div>';
            $node->content['answers']['#value'] = '<div class="clearfix quiz-one-line"><div class="quiz-question-title">Correct Answer :</div>' . $node->content['answers']['#value'] . '</div>';
          }
        case 'multichoice':
          if (arg(2) != 'take') {
            $node->content['question']['#value'] = '<div class="clearfix quiz-one-line"><div class="quiz-question-title">Question :</div>' . $node->content['question']['#value'] .'</div>';
          }
          break;
      }
      break;
    case 'presave':
      switch($node->type) {
        case 'asset':
        case 'curriculum':
        case 'quiz':
        case 'community_interest_group':
        case 'discussion':
          if($node->uid){
            $profile = content_profile_load('profile', $node->uid);
            $node->field_institute[0]['nid'] = $profile->field_institute[0]['nid'];
          }
        break;

      }
    break;
    case 'load':
      switch($node->type) {
        case 'asset':
        case 'curriculum':
        case 'quiz':
        case 'community_interest_group':
        case 'discussion':
        case 'bead':
          if(module_exists('bookmark') && variable_get('bookmark_'. $node->type, 0) == 1){
            $node->bookmark_status = check_bookmark($node->nid, $user->uid);
          }
          if($node->field_reviewers) {
            $flag2 = 0;
            foreach($node->field_reviewers as $value) {
              if($value['uid'] == $user->uid) {
                $flag2 = 1;
              }
            }
          }
          if((variable_get('review_'. $node->type, 0) == 1) && ($node->field_published[0]['value'] == 1)){
            if(($node->uid == $user->uid) || $flag2){
              $node->review_status = TRUE;
            }
            $node->review_count = db_result(db_query("SELECT COUNT(nid) FROM {content_type_reviews} WHERE field_review_reference_nid = %d", $node->nid));
          }

          // @todo: Star Rating.
        break;
      }
    break;
  }
}

/**
 * Override or insert PHPTemplate variables into the templates.
 */
function eb_others_preprocess_page(&$vars) {
  // for all page eb_others.js will load
  drupal_add_js(drupal_get_path('module', 'eb_others') . '/js/eb_others_popups.js');
  drupal_add_js(drupal_get_path('module', 'eb_others') . '/js/eb_others.js');
  drupal_add_js(drupal_get_path('module', 'eb_others') . '/js/preview-basket.js');
  $vars['scripts']  = drupal_get_js();
}


/**
 * Implementation of hook_link_alter()
 */
function eb_others_link_alter(&$links, $node, $comment = NULL) {
  if($node->type == 'profile') {
    if(isset($links)) {
      unset($links);
    }
  }
}

/**
 *  Implementing the hook_popups().
 *
 */
function eb_others_popups() {
  if (arg(0) == "node" && arg(2) == "edit") {
    $node = node_load(arg(1));
  }
  if ($node->type == "reviews" || $node->type == "community_interest_group"  || $node->type == "asset" || $node->type == "curriculum" ||$node->type == "discussion" || $node->type == "quiz" ) {
    // for asset edit content page... onlys
    return array( 'node/*/edit' => array(
        '#edit-delete' => array(
          'additionalJavascript' => array(drupal_get_path('module', 'asset') .'/js/asset-info.js',
          ),
          'href'=> url('node/'.arg(1).'/delete'),
        )
      )
    );
  }
}

/**
 * Custom function to construct Autocomplete Username, which is used in through out the site,
 * where are all we use the autocomplete field.
 */
function generate_autocomplete_user_name($mail, $first_name, $last_name, $image) {
  $user_details['mail'] = $mail;
  $user_details['first_name'] = $first_name;
  $user_details['last_name'] = $last_name;
  $user_details['image'] = $image;
  //Call custom theme function for Autocomplete Users.
  $autocomplete_user = theme('autocomplete_user_name', $user_details);

  return $autocomplete_user;
}
/**
 * Custom theme function for Designing Autocomplete Dropdown Username's
 */

function theme_autocomplete_user_name($user_details){

  $show_casetitle = '<span class="eb-user-name">' . $user_details['first_name'] . ' ' . $user_details['last_name'] . '</span>';
  $show_casetitle .= '<span id="eb-user-mail-id">' . $user_details['mail'] . '</span>';

  $autocomplete_user = '<span class="user-listing clearfix "><span class="user-listing-left float-left">' . $user_details['image'] . '</span><span class="user-listing-name">' . $show_casetitle . '</span></span>';

  return $autocomplete_user;
}
/**
 * Implementation of hook_votingapi_results().
 */
function eb_others_votingapi_results($cached, $content_type, $content_id) {
  $node = node_load($content_id);
  // clear the cache
  if (function_exists("custom_cache_delete")) {
    custom_cache_delete($node);
  }
  // clear the cache
  if (function_exists("clear_listing_cache")) {
    clear_listing_cache($node);
  }
  if ($node->type == 'curriculum') {
    // clear the cache
    if (function_exists("custom_cache_delete")) {
      clear_listing_cache($node, "playlist_listing", "playlist_basket", "playlist_mobile");
    }
  }
  // Apache Solr Index Purpose
  if (function_exists('_apachesolr_nodeapi_update')) {
    _apachesolr_nodeapi_update($node);
  }
}
