<?php
/**
* Implementation of hook_menu()
*
*/


define('EB_NEW_REGISTER', 'New register');
define('EB_STUDENT', 'Student');
define('EB_TEACHER', 'Teacher');

function eb_self_registration_menu() {
  $items = array();
  $items['eb-user/%user/edit'] = array(
    'title' => 'Welcome to  AcrossWorld!',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eb_password_reset', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );

  $items['user/register/thanks'] = array(
    'title' => 'Thank you!',
    'description'      => 'Thanks for registering with the EducationHub!',
    'page callback' => 'eb_user_reg_thanks',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['user/register/blocked-user'] = array(
    'title' => 'Your Registration is Queued for Approval',
    'description'      => 'Your Registration is Queued for Approval',
    'page callback' => 'eb_user_blocked_user',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['user/register/active-user'] = array(
    'title' => 'Thank you!',
    'description'      => 'Thank you!',
    'page callback' => 'eb_user_active_user',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

   $items['user/register/eb-cross-register'] = array(
    'title' => 'Register failed!',
    'description'      => 'Register failed!',
    'page callback' => 'eb_cross_register',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['user/register/eb-password-reset-page'] = array(
    'title' => 'Thank you!',
    'description'      => 'Thank you!',
    'page callback' => 'eb_password_reset_page',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['admin/eb-self-register'] = array(
    'title' => 'Edubridge self register',
    'description' => 'Edubridge self register',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('admin access mobile service'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/eb-self-register/settings'] = array(
    'title'            => 'Edubridge self register setting',
    'description'      => 'Edubridge self register setting.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ebself_register_settings'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Imeplementation of hook_fapi_validation_rules()
 */
function eb_self_registration_fapi_validation_rules() {
  return array(
    'alpha_check' => array(
      'callback' => 'alpha_own_validation',
      'error_msg' => 'Alpha characters only.',
    ),
  );
}

/**
 * Helping function
 */
function alpha_own_validation($value) {
   return TRUE;
}

/**
 * Imeplementation of hook_clientside_validation_rule_alter()
 */
function eb_self_registration_clientside_validation_rule_alter(&$js_rules, $element, $context) {
  switch ($context['type']) {
    case 'fapi':
      if ($context['rule']['callback'] == 'alpha_own_validation') {
        _alpha_own_validation($element['#name'], $element['#title'], $decimalpoint, &$js_rules);
      }
    break;
  }
}



/**
 * Helping function
 */
function _alpha_own_validation($name, $title, $decimalpoint, &$js_rules) {
  //Add your js file
  drupal_add_js(drupal_get_path('module', 'eb_self_registration') . '/templates/eb_self_registration.js', 'theme');
  $title = variable_get('clientside_validation_prefix', '') . $title . variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['alpha_check'] = TRUE;
  $js_rules[$name]['messages']['alpha_check'] = t('Alpha characters only.');
}

/**
 * Implementation of hook_menu_alter().
 */

function eb_self_registration_menu_alter(&$items) {
  $items['user/register']['page arguments'] = array('eb_user_register');
  $items['user/register']['access callback'] =  'eb_user_register_access';
  $items['user/register']['file']= NULL;
}

function eb_user_register_access() {
  $ins_nid = NULL;
  if (arg(0) == 'user' && arg(1) == 'register') {
    $ins_name = arg(2);
    $src_path = drupal_lookup_path('source', 'content/' . $ins_name);
    $explode_path = explode('node/', $src_path);
    if (isset($explode_path[1])) {
      $ins_nid = $explode_path[1];
    }
  }
  // orginal code::
  //for open id problem we dont user drupal user register settings
  //return user_is_anonymous() && variable_get('user_register', 1) && is_numeric($ins_nid);

  return user_is_anonymous() && variable_get('eb_user_register', 1) && is_numeric($ins_nid);
}

/**
 * Implementation of hook_init().
 */

function eb_self_registration_init() {
  global $user;
  if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {

  }
  else {
    $check_rid  = db_result(db_query('SELECT rid from {role} WHERE name = "%s"', EB_NEW_REGISTER));
    if (isset($user->roles[$check_rid])) {
      $pages = array(
        'eb-user/*/edit',
        'logout',
      );
      // convert the array to string, append a newline to every array element.
      $pages = implode(chr(10), $pages);
      // this drupal_get_path_alias
      // will return the alias path if found or the original one which is passed.
      $path = drupal_get_path_alias($_GET['q']);
      // Compare with the internal and path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      if ($page_match) {

      }
      else {
        drupal_goto('eb-user/'. $user->uid . '/edit');
      }
    }
  }
}


/**
  * hook_theme implementation
  *
*/
function eb_self_registration_theme() {
  $path = drupal_get_path('module', 'eb_self_registration');
  return array(
    'eb_reset_pass' => array(
      'template' => 'pass',
       'arguments' => array('form' => NULL),
      'path' => $path . '/templates',
    )
  );
}



function ebself_register_settings(){
  $form = array();
  $form['eb_term_policy_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Terms & Policy'),
    '#description' => t('Terms of Use and Disclaimer Policy node id'),
    '#default_value' => variable_get('eb_term_policy_nid', 85)
  );
  $form['registration'] = array('#type' => 'fieldset', '#title' => t('Education hub registration settings'));
  $form['registration']['eb_user_register'] = array(
    '#type' => 'radios',
    '#default_value' => variable_get('eb_user_register', 1),
    '#options' => array(t('Only site administrators can create new user accounts.'),t('Visitors can create accounts but administrator approval is required.'))
  );

  $form['eb_admin_role'] = array(
    '#type' => 'fieldset',
    '#title' => t("Notifi to admin"),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  // exclude anonymous role
  $system_user_roles = user_roles(TRUE);
  // remove authenticated role
  unset($system_user_roles[DRUPAL_AUTHENTICATED_RID]);
  $form['eb_admin_role']['notifi_admin_role'] = array(
        '#type' => 'checkboxes',
        '#title'         => "User role(s)",
        '#default_value' => variable_get('notifi_admin_role', array()),
        '#options' => $system_user_roles,
        //'#required' => TRUE,
        '#description' => t('Select one or more'),
      );
  $form['eb_admin_role']['notifi_admin_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User(s) mail id'),
    '#description' => t('More than one role, please add comma seperator. Ex: Site Admin,Campus Admin'),
    '#default_value' => variable_get('notifi_admin_user', 'Site Admin')
  );
  $form['eb_admin_role']['eb_admin_option'] = array(
    '#type'          => 'radios',
    '#options'       => array(1 => 'Role based', 2 => 'User based'),
    '#title'         => "Mail to admin",
    '#default_value' => variable_get('eb_admin_option', ''),
    '#required'        => TRUE,
    '#weight' => 3,
  );

  $form['new_registration'] = array(
    '#type' => 'fieldset',
    '#title' => t("Confirmation message to user on submitting the registration"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['new_registration']['notifi_mail_to_create_user_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_create_user_subject', '')
  );
  $form['new_registration']['notifi_mail_to_create_user_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_create_user_body', '')
  );
  $form['new_registration']['notifi_mail_to_create_user_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_create_user_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['reg_err_user'] = array(
    '#type' => 'fieldset',
    '#title' => t("Case user try's to register with a SECOND INSTITUTE"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['reg_err_user']['notifi_mail_to_user_second_institute_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_user_second_institute_subject', '')
  );
  $form['reg_err_user']['notifi_mail_to_user_second_institute_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_user_second_institute_body', '')
  );
  $form['reg_err_user']['notifi_mail_to_user_second_institute_mail'] = array(
   '#type' => 'checkbox',
   '#title' => t('Send mail'),
   '#default_value' => variable_get('notifi_mail_to_user_second_institute_mail', 1),
   '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['reg_err_admin'] = array(
    '#type' => 'fieldset',
    '#title' => t("Notification Mail to admin"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['reg_err_admin']['notifi_mail_to_user_second_institute_admin_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_user_second_institute_admin_subject', 'Attempt to Re-register with !ebinstitutionname')
  );
  $form['reg_err_admin']['notifi_mail_to_user_second_institute_admin_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_user_second_institute_admin_body', '')
  );
  $form['reg_err_admin']['notifi_mail_to_user_second_institute_admin_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_user_second_institute_admin_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['already_register'] = array(
    '#type' => 'fieldset',
    '#title' => t("Notification existing register users"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['already_register']['notifi_mail_to_already_register_user_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_already_register_user_subject', 'Attempt to Re-register with !ebinstitutionname')
  );
  $form['already_register']['notifi_mail_to_already_register_user_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_already_register_user_body', '')
  );
  $form['already_register']['notifi_mail_to_already_register_user_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_already_register_user_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['already_register_blocked'] = array(
    '#type' => 'fieldset',
    '#title' => t("Notification existing register blocked users"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['already_register_blocked']['notifi_mail_to_already_register_blocked_user_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_already_register_blocked_user_subject', '')
  );
  $form['already_register_blocked']['notifi_mail_to_already_register_blocked_user_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_already_register_blocked_user_body', '')
  );
  $form['already_register_blocked']['notifi_mail_to_already_register_blocked_user_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_already_register_blocked_user_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['already_register_blocked_admin'] = array(
    '#type' => 'fieldset',
    '#title' => t("Notification existing register blocked users to admin"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['already_register_blocked_admin']['notifi_mail_to_already_register_blocked_admin_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_already_register_blocked_admin_subject', '')
  );
  $form['already_register_blocked_admin']['notifi_mail_to_already_register_blocked_admin_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_already_register_blocked_admin_body', '')
  );
  $form['already_register_blocked_admin']['notifi_mail_to_already_register_blocked_admin_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_already_register_blocked_admin_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['eb_password_reset'] = array(
    '#type' => 'fieldset',
    '#title' => t("Mail admin about password reset"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eb_password_reset']['notifi_mail_to_admin_pass_reset_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_admin_pass_reset_subject', 'Attempt to Re-register with !ebinstitutionname')
  );
  $form['eb_password_reset']['notifi_mail_to_admin_pass_reset_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_admin_pass_reset_body', '')
  );
  $form['eb_password_reset']['notifi_mail_to_admin_pass_reset_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_admin_pass_reset_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );


  $form['eb_valid_reg_to_admin'] = array(
    '#type' => 'fieldset',
    '#title' => t("Valid registration send mail to admin"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eb_valid_reg_to_admin']['notifi_mail_to_admin_reg_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_admin_reg_subject', '')
  );
  $form['eb_valid_reg_to_admin']['notifi_mail_to_admin_reg_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_admin_reg_body', '')
  );
  $form['eb_valid_reg_to_admin']['notifi_mail_to_admin_reg_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_admin_reg_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['eb_user_accept_mail'] = array(
    '#type' => 'fieldset',
    '#title' => t("Confirmation Mail to User on Approval"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eb_user_accept_mail']['notifi_mail_to_user_accept_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_user_accept_subject', '')
  );
  $form['eb_user_accept_mail']['notifi_mail_to_user_accept_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_user_accept_body', '')
  );
  $form['eb_user_accept_mail']['notifi_mail_to_user_accept_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send mail'),
    '#default_value' => variable_get('notifi_mail_to_user_accept_mail', 1),
    '#description' => t("If its checked then mail will send, else mail wont sent")
  );

  $form['eb_user_reject_mail'] = array(
    '#type' => 'fieldset',
    '#title' => t("Rejection Mail to User"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eb_user_reject_mail']['notifi_mail_to_user_reject_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('notifi_mail_to_user_reject_subject', '')
  );
  $form['eb_user_reject_mail']['notifi_mail_to_user_reject_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body message'),
    '#rows' => 3,
    '#cols' => 8,
    '#default_value' => variable_get('notifi_mail_to_user_reject_body', '')
  );
  $form['eb_user_reject_mail']['notifi_mail_to_user_reject_mail'] = array(
   '#type' => 'checkbox',
   '#title' => t('Send mail'),
   '#default_value' => variable_get('notifi_mail_to_user_reject_mail', 1),
   '#description' => t("If its checked then mail will send, else mail wont sent")
  );
  return system_settings_form($form);
}


function ebself_register_settings_validate($form, &$form_state) {
  if ($form_state['values']['eb_admin_option'] == 1) {
    if (count($form_state['clicked_button']['#post']['notifi_admin_role']) == 0) {
      //form_set_error('notifi_admin_role][3', t("You need to select at least one role."));
      //form_set_error("eb_admin_role']['notifi_admin_role", t("You need to select at least one role."));
      form_set_error("notifi_admin_role", t("You need to select at least one role."));
    }
  }
  else {
    if (trim($form_state['values']['notifi_admin_user'])) {
      $notifi_admin_user_arr = explode(',', trim($form_state['values']['notifi_admin_user']));
      $mailid_arr = array();
      if (count($notifi_admin_user_arr) > 0) {
        foreach($notifi_admin_user_arr AS $key => $value ) {
          $eb_mailid = trim($value);
          $mailid_arr[$eb_mailid]  = $eb_mailid;
        }
        if (count($mailid_arr) > 0) {
          $invalid_arr = array();
          foreach($mailid_arr AS $key => $value) {
            $chk_mail = trim($value);
            $check = db_result(db_query('SELECT uid from {users} WHERE mail = "%s"', $chk_mail));
            if ($check) {

            }
            else {
              $invalid_arr[$chk_mail] = $chk_mail;
            }
          }
          if (count($invalid_arr)  > 0) {
            form_set_error("notifi_admin_user", t('Invalid mail id(s) @invalidmails', array('@invalidmails' => implode(',', $invalid_arr))));
          }
        }
      }
    }
    else {
      form_set_error("notifi_admin_user", t('User(s) mail id should not empty'));
    }
  }
}


/**
 * Implementation of hook_form_alter
 */
function eb_self_registration_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'user_admin_settings':
      $form['registration']['user_register']['#disabled'] = TRUE;
      $form['registration']['user_email_verification']['#disabled'] = TRUE;
    break;
    case 'user_pass':
      if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
      }
      else {
        $form['#submit'][] = 'eb_user_pass_submit';
      }
    break;
  }
}

function eb_user_pass_submit($form, &$form_state) {
  $_SESSION['eb-password-reset-page'] = TRUE;
  $form_state['redirect'] = 'user/register/eb-password-reset-page';
}


/**
 * Implementation of hook_user().
 *
 */
function eb_self_registration_user($op, &$edit, &$account, $category = NULL) {
  global $user, $base_url;
  switch ($op) {
    case 'login':
      if (arg(1) == 'reset' && arg(5) == 'login') {
        $_REQUEST['destination'] =  'eb-user/' . $user->uid .'/edit';
      }
    break;
    case 'insert':
      if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
      }
      else {
        $rid  = db_result(db_query('SELECT rid from {role} WHERE name = "%s"', EB_NEW_REGISTER));
        $roles = user_roles(TRUE);
        // add it to the user
        $edit['roles'][$rid] = $roles[$rid];
      }
    break;
    case 'submit':
      if ($account->login == 0) {
        if($edit['status'] == 1) {
          $op = 'eb_new_active_register';
        }
        else {
          $op = 'eb_new_blocked_register';
        }
        if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
          //eb_mail_notify($op, $account);
        }
        else {
          eb_mail_notify($op, $account, TRUE);
        }
      }
    break;
  }
}

function eb_password_reset($form_state, $account) {
  drupal_add_css(drupal_get_path('module', 'eb_self_registration') .'/templates/eb_self_registration.css', 'theme');
  drupal_add_js(drupal_get_path('module', 'eb_self_registration') .'/templates/eb_self_registration.js', 'theme');

  $form = array();
  $form['#uid'] = $account->uid;
  if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {}
  else {
    _user_password_dynamic_validation();
    module_load_include('inc', 'user', 'user.pages');
    $form['text'] = array(
      '#value'  => 'Please reset your password and  accept the terms of use and disclaimerpolicy',
      '#weight' => -10,
    );
    $form['account']['pass'] = array('#type' => 'password_confirm',
      '#size' => 25,
      '#required' => TRUE,
    );
  }
  $form['_category'] = array('#type' => 'value', '#value' => 'account');
  $form['_account']  = array('#type' => 'value', '#value' => $account);
  $form['info_title'] = array(
    '#value'  => '<h3 class="info-title">Terms of Use and Disclaimer Policy</h3>',
    '#weight' => 1,
  );
  $info_cont = node_load(variable_get('eb_term_policy_nid', 85))->body;
  $form['info_content'] = array(
    '#value'  => '<div class="info-content"> ' . $info_cont .  ' </div>',
    '#weight' => 2,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save & Accept'),
    '#disabled' => TRUE,
    '#submit' => array('user_profile_form_submit','eb_self_user_profile_form_submit'), '#weight' => 3
  );
  if (user_access("administer nodes")) {
    $form['#redirect'] = 'admin/by-module';
  }
  else if (user_access("administer users")) {
    $form['#redirect'] = 'admin/user/user/list';
  }
  else if (user_access("create asset content")) {
    $form['#redirect'] = 'bridge/myassets';
  }
  else {
    $form['#redirect'] = 'bridge/myassignments';
  }
  $form['#theme'] = 'eb_reset_pass';
  return $form;
}



/**
 * Submit function for the user account and profile editing form.
 */
function eb_self_user_profile_form_submit($form, &$form_state) {
  global $user;
  $remove_rid  = db_result(db_query('SELECT rid from {role} WHERE name = "%s"', EB_NEW_REGISTER));
  if (isset($user->roles[$remove_rid])) {
    unset($user->roles[$remove_rid]);
    unset($user->eb_user_institute);
    $edit = array('roles' => $user->roles);
    user_save($user, $edit);
  }
}

function eb_self_registration_preprocess_page(&$vars) {
  if (arg(0) == 'user' && arg(1) == 'register' ) {
    $vars['body_classes'] .= ' eb-self-register ';
    if (arg(2) != 'thanks' && arg(2) != 'blocked-user' && arg(2) != 'active-user' && arg(2) != 'eb-password-reset-page' && arg(2)!= 'eb-cross-register' ) {
      $options['attributes']['class'] = 'log-in';
      $link = l('Log In', 'user/login', $options);
      $text = '   Log in if you already have an AcrossWorld account';
      $vars['title'] =  $link . $text;
    }
  }
}

/*
 * Custom eb_user_register
 *
 */

function eb_user_register($form_state) {
  drupal_add_css(drupal_get_path('module', 'eb_self_registration') .'/templates/eb_self_registration.css', 'theme');
  $ins_nid = NULL;
  if (arg(0) == 'user' && arg(1) == 'register') {
    $ins_name = arg(2);
    $src_path = drupal_lookup_path('source', 'content/' . $ins_name);
    $explode_path = explode('node/', $src_path);
    if (isset($explode_path[1])) {
      $ins_nid = $explode_path[1];
      $institute_name =  db_result(db_query('SELECT title FROM {node} WHERE nid = %d',$ins_nid));
    }
  }
  $form = array();
  $form['account']['top_content'] = array(
    '#value'  => '<div class="top-content">You&rsquo;re almost there!</div>',
    '#weight' => -2,
  );
  $form['account']['middle_content'] = array(
    '#value'  => '<div class="middle-content">AcrossWorld Registration</div>',
    '#weight' => -1,
  );

  $form['account']['bottom_content'] = array(
    '#value'  => '<div class="bottom-content">Sign up to use your AcrossWorld account With <span class="orange">' . $institute_name . '</span></div>',
    '#weight' => 0,
  );
  $form['account']['first_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('First name'),
    '#size'          => 40,
    '#maxlength'     => 20,
    '#default_value' => '',
    '#required'      => TRUE,
    //'#rules' => array('alpha_dash'),
    '#element_validate' => array('eb_filter_form_validate'),
    '#weight' => 1,
  );
  $form['account']['institute_id'] = array(
    '#type' => 'hidden',
    '#value' => $ins_nid
  );
  $form['account']['last_name'] = array(
    '#type'          => 'textfield',
    '#title'         => "Last Name",
    '#size'          => 40,
    '#maxlength'     => 20,
    '#default_value' => '',
    '#required'      => TRUE,
    '#element_validate' => array('eb_filter_form_validate'),
    '#weight' => 2,
  );
  $role_arr = array();
  $role_names =  array(EB_STUDENT, EB_TEACHER);
  $query = db_query("SELECT R.* FROM {role} R WHERE LOWER(R.name) IN (" . db_placeholders($role_names, 'varchar') . ") order by name desc", $role_names);
  if (db_affected_rows()) {
    while($row = db_fetch_object($query)) {
      $role_arr[$row->rid] = $row->name;
    }
  }
  $form['account']['roles'] = array(
    '#type'          => 'radios',
    '#options'       => $role_arr,
    '#title'         => "Role",
    '#default_value' => '',
    '#required'        => TRUE,
    '#weight' => 3,
  );
  $form['account']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email ID'),
    '#default_value' => $edit['mail'],
    '#maxlength' => EMAIL_MAX_LENGTH,
    //'#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),
    '#required' => TRUE,
    '#weight' => 4,
  );
  $form['account']['conf_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Retype Email ID'),
    '#weight' => 5,
    '#maxlength' => 64,
    //'#description' => t('Please re-type your e-mail address to confirm it is accurate.'),
    '#required' => TRUE,
  );
  $form['account']['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes') . '<br/>(Optional)' ,
    '#default_value' => $edit['signature'],
   // '#description' => t('Your signature will be publicly displayed at the end of your comments.'),
    '#weight' => 6
  );
  $form['button']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up'),
    '#submit' => array('eb_custom_user_form_submit'),
    '#prefix' => '<div>',
    '#suffix' => '</div>',
    '#weight' => 3
  );
  $quick_link = 'or ' . l('Log in to AcrossWorld','user/login');
  $form['button']['quick_link'] = array(
    '#value'  => '<div class="quick_link">'.$quick_link .'</div>',
    '#weight' => 8,
  );
  $form['account']['#weight'] = 1;
  $form['button']['#weight'] = 3;
  $form['#after_build'][] = 'some_form_after_build';
  $form['#redirect'] = 'user/register/thanks';
  return $form;
}



function some_form_after_build($form, &$form_state) {
  $form['captcha']['#description'] = NULL;
  $form['captcha']['#weight'] = 2;
  return $form;
}


function eb_filter_form_validate($element, &$form_state) {
  if ((bool) preg_match('/^[\pL]++$/uD', (string) $form_state['values'][$element['#name']])) {
  }
  else {
    //form_set_error($element['#name'], t('Use only alpha characters at %field', array('%field' => $element['#title'])));
  }
}

/**
 * Override User register form validate.
 */
function eb_user_register_validate($form, &$form_state) {
  // Validate the e-mail address:
  if ($error = user_validate_mail($form_state['values']['mail'])) {
    form_set_error('mail', $error);
  }
  else if (isset($form_state['values']['conf_mail']) && $form_state['values']['mail'] != $form_state['values']['conf_mail']) {
    form_set_error('conf_mail', t('Your e-mail address and confirmed e-mail address must match.'));
  }
  else {
    if (!isset($_SESSION['messages']['error'])){
      if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
        $user_info['mail'] = $form_state['values']['mail'];
        $secret = 'klm345';
        $rl_realm = variable_get('openlogin_ssoclient_hub_url', '');
        $user_info['hash_mdm'] =  md5("attach{$user_info['mail']}{$secret}");
        // for existing user registration mail
        $user_info['mail_self_register'] = TRUE;
        $user_info['hub_institute_main'] = db_result(db_query("SELECT field_institute_hub_id_value FROM {content_type_institute} WHERE nid=%d", $form_state['clicked_button']['#post']['institute_id']));
        //To get the user info if already available
        $user_data = user_load(array('mail' => $form_state['values']['mail']));
        $user_info['op_mail'] = 'eb_re_register_institute_error';
        $flag == 0;
        //check if user exists
        if (!empty($user_data)) {
          $pf_user =  content_profile_load('profile', $user_data->uid,  '', TRUE);
          $user_info['uid'] = $user_data->uid;
          $user_info['mail'] = $user_data->mail;
          $user_info['status'] = $user_data->status;
          $user_info['name'] = $user_data->name;
          $user_info['pass'] = $user_data->pass;
          $user_info['firstname'] = $pf_user->field_profile_first_name[0]['value'];
          $user_info['lastname'] = $pf_user->field_profile_last_name[0]['value'];
          $user_info['hub_institute'] = db_result(db_query("SELECT field_institute_hub_id_value FROM {content_type_institute} WHERE nid=%d", $pf_user->field_institute[0]['nid']));
          $user_info['existing_user'] = TRUE;
          $user_info['existing_user_status'] = $user_data->status;
          // check if the user is in active or blocked state
          if ($user_data->status == 1) {
            $flag = 1;
          }
          else {
            $flag = 2;
            // if user is in blocked state then this mail will generate
            $user_info['op_mail'] = 'eb_re_register_institute_user_blocked_error';
          }
        }
        watchdog('sso_hub', 'Check User Available mail id = @mailid, user existing status = @exist_userstatus, curl status = @status', array('@mailid' => $user_info['mail'],  '@exist_userstatus' => $user_info['existing_user_status'],  '@status' => 0));
        $authenticate = _authenticated_curl(NULL, $rl_realm, TRUE);
        $success = json_decode(curltransfer(NULL, $rl_realm, $user_info, $authenticate, "openid-client-userdata-check"));
        watchdog('sso_hub', 'Check User Available mail id = @mailid, user existing status = @exist_userstatus, curl status = @status', array('@mailid' => $user_info['mail'],  '@exist_userstatus' => $user_info['existing_user_status'],  '@status' => $success->success_status));
        //check if user already exists and hub server and child instance
        if ($success->success_status == 2 && $flag == 1) {
          $user_data = user_load(array('mail' => $form_state['values']['mail']));
          $profile_info = content_profile_load('profile', $user_data->uid, '', TRUE);
          $user_data->extra['hubinstitute_name'] = $success->institute_name;
          $user_data->extra['secondinstitute_id'] = $form_state['clicked_button']['#post']['institute_id'];
          $authmapid = db_result(db_query("SELECT aid FROM {authmap} WHERE uid=%d AND authname='%s'", $user_info['uid'], $success->openid));
          //if open id already exists then update the authmap table
          if (!$authmapid) {
            db_query("UPDATE {authmap} SET uid=%d, authname='%s', module='openid' WHERE aid=%d", $user_info['uid'], $success->openid, $authmapid);
          }
          //check if the user register in same institute or other institue
          if ($form_state['clicked_button']['#post']['institute_id'] == $profile_info->field_institute[0]['nid']){
            eb_mail_notify("eb_re_register_institute_error", $user_data, FALSE);
            form_set_error('mail', 'Error');
            $_SESSION['eb_user_active_user'] = $user_data;
            drupal_goto('user/register/active-user');
          }
          else {
            eb_mail_notify("eb_second_institute_error", $user_data, FALSE);
            form_set_error('mail', 'Error');
            $_SESSION['eb_cross_register'] = $user_data;
            drupal_goto('user/register/eb-cross-register');
          }
        }
        else if ($success->success_status == 2 && $flag == 2) {
          eb_mail_notify($user_info['op_mail'], $user_data, FALSE);
          $authmapid = db_result(db_query("SELECT aid FROM {authmap} WHERE uid=%d AND authname='%s'", $user_info['uid'], $success->openid));
          if (!$authmapid) {
            db_query("UPDATE {authmap} SET uid=%d, authname='%s', module='openid' WHERE aid=%d", $user_info['uid'], $success->openid, $authmapid);
          }
          form_set_error('mail', 'Error');
          $_SESSION['eb_user_blocked_user'] = $user_data;
          drupal_goto('user/register/blocked-user');
        }
        else if ($success->success_status == 2 && $flag == 0) {
          $success->other = TRUE;
          $success->extra['secondinstitute_id'] = $form_state['clicked_button']['#post']['institute_id'];
          eb_mail_notify("eb_second_institute_error", $success, FALSE);
          $_SESSION['eb_cross_register'] = $success;
          drupal_goto('user/register/eb-cross-register');
        }
      }
      else {
        if (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE uid != %d AND mail = '%s'", FALSE, $form_state['values']['mail'])) > 0) {
          form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
          _other_institute_reg_error($form_state['clicked_button']['#post']);
        }
        else if (drupal_is_denied('mail', $form_state['values']['mail'])) {
          form_set_error('mail', t('The e-mail address %email has been denied access.', array('%email' => $form_state['values']['mail'])));
        }
      }
    }
  }
}

/**
 * Submit function for the user account and profile editing form.
 */
function eb_custom_user_form_submit($form, &$form_state) {
  global $base_url;
  if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
    $user_info['mail'] = $form_state['values']['mail'];
    $secret = 'klm345';
    $rl_realm = variable_get('openlogin_ssoclient_hub_url', '');
    $user_info['hash_mdm'] =  md5("attach{$user_info['mail']}{$secret}");
    $user_info['mail_self_register'] = TRUE;
    $user_info['op_mail'] = 'eb_re_register_institute_error';

    $authenticate = _authenticated_curl(NULL, $rl_realm, TRUE);
    $success = json_decode(curltransfer(NULL, $rl_realm, $user_info, $authenticate, "openid-client-userdata-check"));
    watchdog('sso_hub', 'Check User Available mail id = @mailid, status = @status', array('@mailid' => $user_info['mail'],  '@status' => $user_info->success_status));
    if ($success->success_status == 1) {
      $user_saved_info = eb_user_save($form, $form_state);
      $user_info = array();
      $user_info['uid'] = $user_saved_info['account']->uid;
      $user_info['mail'] = $user_saved_info['account']->mail;
      $user_info['status'] = $user_saved_info['account']->status;
      $user_info['name'] = $user_saved_info['account']->name;
      $user_info['pass'] = $user_saved_info['account']->pass;
      $user_info['firstname'] = $user_saved_info['_node']->field_profile_first_name[0]['value'];
      $user_info['lastname'] = $user_saved_info['_node']->field_profile_last_name[0]['value'];
      $user_info['hub_institute'] = db_result(db_query("SELECT field_institute_hub_id_value FROM {content_type_institute} WHERE nid=%d", $user_saved_info['_node']->field_institute[0]['nid']));
      $user_info['realm'] = $base_url.'/';
      $user_info['op_mail'] = 'eb_new_register';
      $user_info['mail_self_register'] = TRUE;
      $user_info['category'] = 1;
      $user_info['curllog_id'] = log_user_info($user_info['uid'], $user_info['mail'], $user_info['category'], 0, 0, 1);
      $temp = array();
      watchdog('sso_client', 'User info Before curl call uid = @uid, category =@category, status = @status, Hub institute id =@institute_id', array('@uid' => $user_info['uid'], '@category' => $category, '@status' => 0, '@institute_id' => $user_info['hub_institute']));
      _excelimport_delete_line($user_info, $temp, FALSE);
    }
  }
  else {
    eb_user_save($form, $form_state);
  }
}


function eb_user_save($form, &$form_state) {
  global $base_url;
  $admin = user_access('administer users');
  $mail = $form_state['values']['mail'];
  $form_state['values']['name'] = $form_state['values']['mail'];
  // Must unset mail confirmation to prevent it from being saved in the user table's 'data' field.
  // :: start ::
  if (isset($form_state['values']['conf_mail'])) {
    unset($form_state['values']['conf_mail']);
  }
  if (isset($form_state['values']['first_name'])) {
    $first_name =  $form_state['values']['first_name'];
    unset($form_state['values']['first_name']);
  }
  if (isset($form_state['values']['last_name'])) {
    $last_name =  $form_state['values']['last_name'];
    unset($form_state['values']['last_name']);
  }

  if (isset($form_state['clicked_button']['#post']['institute_id'])) {
    $institute_id =  $form_state['clicked_button']['#post']['institute_id'];
  }
  if (isset($form_state['values']['notes'])) {
    $notes =  $form_state['values']['notes'];
    unset($form_state['values']['notes']);
  }
  // :: stop ::

  $pass = user_password();
  $notify = isset($form_state['values']['notify']) ? $form_state['values']['notify'] : NULL;
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  if (isset($form_state['values']['roles'])) {
    // Remove unset roles.
    $rid = $form_state['values']['roles'];
    $roles = array_filter(array($form_state['values']['roles'] => $form_state['values']['roles']));
  }
  else {
    $roles = array();
  }
  // user data.
  unset($form_state['values']['form_token'], $form_state['values']['submit'], $form_state['values']['op'], $form_state['values']['notify'], $form_state['values']['form_id'], $form_state['values']['affiliates'], $form_state['values']['destination']);

  $merge_data = array('pass' => $pass, 'init' => $mail, 'roles' => $roles);
  if (!$admin) {
    // Set the user's status because it was not displayed in the form.
    //$merge_data['status'] = variable_get('eb_user_register', 1) == 1;
  }
  $account = user_save('', array_merge($form_state['values'], $merge_data));
  $_SESSION['eb_user_successive_reg'] = TRUE;
  $results['account'] = $account;
  /**/
   if ($account) {
  // Create new object.
    $cp_node = new stdClass();
    $cp_node->type = 'profile';
    $cp_node->uid = $account->uid;
    $cp_node->name = $account->mail;
    $cp_node->title = $first_name . $last_name;
    $cp_node->created =  time();
    $cp_node->field_profile_first_name[0] = array('value' => $first_name);
    $cp_node->field_profile_last_name[0]  = array('value' => $last_name);
    $cp_node->field_institute['nid'] = array('nid' => $institute_id);
    node_save($cp_node);
    $account->profile = $cp_node;
    $ins = array();
    $ins['first_name'] = $first_name;
    $ins['last_name'] = $last_name;
    $ins['rid'] = $rid;
    $ins['institute_id'] = $institute_id;
    $ins['mail'] = $account->mail;
    $ins['notes'] = $notes;
    $ins['msg'] = '';
    $ins['status'] = 1;
    $ins['timestamp'] = $account->created;
    eb_self_registration($ins);
  }
  $results['_node'] = $cp_node;
  /**/


  // Terminate if an error occured during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    $form_state['redirect'] = '';
    return;
  }
  $form_state['user'] = $account;
  watchdog('user', 'New user: %name (%email).', array('%name' => $name, '%email' => $mail), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));
  // The first user may login immediately, and receives a customized welcome e-mail.
  if ($account->uid == 1) {
    /*drupal_set_message(t('Welcome to Drupal. You are now logged in as user #1, which gives you full control over your website.'));
    if (variable_get('user_email_verification', TRUE)) {
      drupal_set_message(t('</p><p> Your password is <strong>%pass</strong>. You may change your password below.</p>', array('%pass' => $pass)));
    }
    user_authenticate(array_merge($form_state['values'], $merge_data));
    $form_state['redirect'] = 'user/1/edit';
    return $results;*/
  }
  else {
    // Add plain text password into user account to generate mail tokens.
    $account->password = $pass;
    if ($admin && !$notify) {
      //drupal_set_message(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));
    }
    else if (!variable_get('user_email_verification', TRUE) && $account->status && !$admin) {
   /*   // No e-mail verification is required, create new user account, and login
      // user immediately.
      _user_mail_notify('register_no_approval_required', $account);
      if (user_authenticate(array_merge($form_state['values'], $merge_data))) {
        drupal_set_message(t('Registration successful. You are now logged in.'));
      }
      $form_state['redirect'] = '';
      return $results;*/
    }
    else if ($account->status || $notify) {
      // Create new user account, no administrator approval required.
    /*  $op = $notify ? 'register_admin_created' : 'register_no_approval_required';
      _user_mail_notify($op, $account);
      if ($notify) {
        drupal_set_message(t('Password and further instructions have been e-mailed to the new user <a href="@url">%name</a>.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));
      }
      else {
        drupal_set_message(t('Your password and further instructions have been sent to your e-mail address.'));
        $form_state['redirect'] = '';
        return $results;
      }*/
    }
    else {
      // Create new user account, administrator approval required.
      //_user_mail_notify('register_pending_approval', $account);
      $account->extra = $ins;
      if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
        eb_mail_notify('eb_new_register', $account);
      }
      else {
        eb_mail_notify('eb_new_register', $account, TRUE);
      }
      drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'));
      $form_state['redirect'] = '';
      return $results;

    }
  }
}

function eb_self_registration($info_arr) {
  $insert = array();
  $insert['first_name'] = $info_arr['first_name'];
  $insert['last_name'] = $info_arr['last_name'];
  $insert['rid'] = $info_arr['rid'];
  $insert['institute_id'] = $institute_id;
  $insert['mail'] = $info_arr['mail'];
  $insert['notes'] = $info_arr['notes'];
  $insert['msg'] = $info_arr['msg'];
  $insert['status'] = $info_arr['status'];
  if (isset($info_arr['timestamp'])) {
    $insert['timestamp'] = $info_arr['timestamp'];
  }
  else {
    $insert['timestamp'] = time();
  }
  drupal_write_record('eb_self_registration', $insert);
}


function _eb_get_admin_mail_list() {
  $mails = '';
  $type = variable_get('eb_admin_option', 1);
  if ($type == 2) {
    $notifi_admin_user =  trim(variable_get('notifi_admin_user', variable_get('site_mail', ini_get('sendmail_from'))));
    $mail_send_arr = explode(',', $notifi_admin_user);
  }
  else {
    $notifi_admin_role = variable_get('notifi_admin_role', array());
    $notifi_admin_role = array_filter($notifi_admin_role);
    if (count($notifi_admin_role) > 0) {
      $sync_user_total =  db_query("SELECT u.mail  FROM {users} u
                                   INNER JOIN {users_roles} ur on u.uid = ur.uid
                                   WHERE ur.rid  IN (".db_placeholders($notifi_admin_role, 'int').")", $notifi_admin_role);
      $mail_send_arr = array();
      while ($res = db_fetch_object($sync_user_total)) {
        $mail_send_arr[] = $res->mail;
      }
    }
  }
  if (count($mail_send_arr)) {
    $mails_list = implode(',', $mail_send_arr);
  }
  else {
    $mails_list = variable_get('site_mail', ini_get('sendmail_from'));
  }
  return trim($mails_list);
}

function _other_institute_reg_error($value) {
  if (isset($value)) {
    $t_mail = $value['mail'];
    $t_user = user_load(array('mail' => $t_mail));
    if ($t_user) {
      if (!isset($t_user->institute_id)) {
        $pf_user = content_profile_load('profile', $t_user->uid);
        $t_user->institute_id = $pf_user->field_institute[0]['nid'];
      }
      if ($value['institute_id'] ==  $t_user->institute_id) {
        $t_institute_cont = node_load($t_user->institute_id);
        if ($t_institute_cont) {
          $t_institute_title = $t_institute_cont->title;
          $t_user->extra = $value;
          if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
            if ($t_user->status == 1) {
              eb_mail_notify('eb_re_register_institute_error', $t_user);
            }
            else {
              eb_mail_notify('eb_re_register_institute_user_blocked_error', $t_user);
            }
          }
          else {
            if ($t_user->status == 1) {
              eb_mail_notify('eb_re_register_institute_error', $t_user, TRUE);
              $_SESSION['eb_user_active_user'] = $t_user;
              drupal_goto('user/register/active-user');
            }
            else {
              eb_mail_notify('eb_re_register_institute_user_blocked_error', $t_user, TRUE);
              $_SESSION['eb_user_blocked_user'] = $t_user;
              drupal_goto('user/register/blocked-user');
            }
          }
        }
      }
      else {
        $t_institute_cont = node_load($t_user->institute_id);
        if ($t_institute_cont) {
          $t_institute_title = $t_institute_cont->title;
          $t_user->extra = $value;
          $t_user->extra['secondinstitute_id'] = $value['institute_id'];
          if (module_exists('sso_client') && !variable_get('openid_login_custom_override', false)) {
            eb_mail_notify('eb_second_institute_error', $t_user);
          }
          else {
            eb_mail_notify('eb_second_institute_error', $t_user, TRUE);
          }
          $_SESSION['eb_cross_register'] = $t_user;
          drupal_goto('user/register/eb-cross-register');
        }
      }
    }
  }
}

function eb_mail_notify($op, $account = NULL, $user_send = FALSE) {

  $from_name = 'EducationHub Admin';
  $from_mail = variable_get('site_mail', ini_get('sendmail_from'));
  $variables = eb_user_mail_tokens($account, $language);
  switch ($op)  {
    case 'eb_new_register':
      if ($user_send && variable_get('notifi_mail_to_create_user_mail', 1)) {
        $subject = variable_get('notifi_mail_to_create_user_subject', '');
        $body    = variable_get('notifi_mail_to_create_user_body', '');
        $language = NULL;
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = $account->mail;
        $mail_id = $op . '_user';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
      // send mail to admin
      if (variable_get('notifi_mail_to_admin_reg_mail', 1)) {
        $subject = variable_get('notifi_mail_to_admin_reg_subject', '');
        $body    = variable_get('notifi_mail_to_admin_reg_body', '');
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = _eb_get_admin_mail_list();
        $mail_id = $op . '_admin';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
    break;
    case 'eb_second_institute_error':
      if ($user_send && variable_get('notifi_mail_to_user_second_institute_mail', 1)) {
        $subject = variable_get('notifi_mail_to_user_second_institute_subject', '');
        $body    = variable_get('notifi_mail_to_user_second_institute_body', '');
        $language = NULL;
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = $account->mail;
        $mail_id = $op . '_user';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
      if (variable_get('notifi_mail_to_user_second_institute_admin_mail', 1)) {
        // send mail to admin
        $subject = variable_get('notifi_mail_to_user_second_institute_admin_subject', '');
        $body    = variable_get('notifi_mail_to_user_second_institute_admin_body', '');
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = _eb_get_admin_mail_list();
        $mail_id = $op . '_admin';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
    break;
    case 'eb_re_register_institute_error':
      if ($user_send && variable_get('notifi_mail_to_already_register_user_mail', 1)) {
        $subject = variable_get('notifi_mail_to_already_register_user_subject', '');
        $body    = variable_get('notifi_mail_to_already_register_user_body', '');
        $language = NULL;
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = $account->mail;
        $mail_id = $op . '_user';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
      // send mail to admin
      if (variable_get('notifi_mail_to_admin_pass_reset_mail', 1)) {
        $subject = variable_get('notifi_mail_to_admin_pass_reset_subject', '');
        $body    = variable_get('notifi_mail_to_admin_pass_reset_body', '');
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = _eb_get_admin_mail_list();
        $mail_id = $op . '_admin';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
    break;
    case 'eb_re_register_institute_user_blocked_error':
      if ($user_send && variable_get('notifi_mail_to_already_register_blocked_user_mail', 1)) {
        $subject = variable_get('notifi_mail_to_already_register_blocked_user_subject', '');
        $body    = variable_get('notifi_mail_to_already_register_blocked_user_body', '');
        $language = NULL;
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = $account->mail;
        $mail_id = $op . '_user';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
      // send mail to admin
      if (variable_get('notifi_mail_to_already_register_blocked_admin_mail', 1)) {
        $subject = variable_get('notifi_mail_to_already_register_blocked_admin_subject', '');
        $body    = variable_get('notifi_mail_to_already_register_blocked_admin_body', '');
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = _eb_get_admin_mail_list();
        $mail_id = $op . '_admin';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
    break;
    case 'eb_new_active_register':
      if ($user_send &&  variable_get('notifi_mail_to_user_accept_mail', 1)) {
        $subject = variable_get('notifi_mail_to_user_accept_subject', '');
        $body    = variable_get('notifi_mail_to_user_accept_body', '');
        $language = NULL;
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = $account->mail;
        $mail_id = $op . '_user';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
    break;
    case 'eb_new_blocked_register':
      if ($user_send &&  variable_get('notifi_mail_to_user_reject_mail', 1)) {
        $subject = variable_get('notifi_mail_to_user_reject_subject', '');
        $body    = variable_get('notifi_mail_to_user_reject_body', '');
        $language = NULL;
        $subject =  t($subject, $variables);
        $body =  nl2br(t($body, $variables));
        $to_mail = $account->mail;
        $mail_id = $op . '_user';
        custom_mail($from_name, $from_mail, $to_mail, $subject, $body, $mail_id);
      }
    break;
  }
}

function eb_user_mail_tokens($account, $language) {
  global $base_url;
  $system_user_roles = user_roles(TRUE);
  unset($system_user_roles[DRUPAL_AUTHENTICATED_RID]);
  if (isset($account->other)) {
    $firstname = ucfirst($account->load->profile->field_profile_first_name[0]->value);
    $lastname = $account->load->profile->field_profile_last_name[0]->value;
  }
  else if (isset($account->extra['first_name'])) {
    $firstname = ucfirst($account->extra['first_name']);
    $lastname = $account->extra['last_name'];
  }
  else if (isset($account->uid)) {
    $pf_user = content_profile_load('profile', $account->uid);
    if ($pf_user) {
      $firstname = ucfirst($pf_user->field_profile_first_name[0]['value']);
      $lastname = $pf_user->field_profile_last_name[0]['value'];
    }
  }

  if (isset($account->extra['mail'])) {
    $eb_mail = $account->extra['mail'];
  }
  else if($account->mail) {
    $eb_mail = $account->mail;
  }
  else {
    $eb_mail ='';
  }
  $eb_notes = nl2br($account->extra['notes']);
  $eb_rid = 0;
  if (isset($account->extra['rid'])) {
    $eb_rid = $account->extra['rid'];
  }
  else if (isset($account->extra['roles'])) {
     $eb_rid = $account->extra['roles'];
  }
  else if (isset($account->roles)) {
    $role_arr = array();
    $role_names =  array(EB_STUDENT, EB_TEACHER);
    $query = db_query("SELECT R.* FROM {role} R WHERE LOWER(R.name) IN (" . db_placeholders($role_names, 'varchar') . ")", $role_names);
    if (db_affected_rows()) {
      while($row = db_fetch_object($query)) {
        $role_arr[$row->rid] = $row->name;
      }
    }
    foreach($role_arr AS $ckkey => $ckvalue) {
      if (array_key_exists($ckkey, $account->roles)) {
        $eb_rid = $ckkey;
        break;
      }
   }
  }
  $hubinstitute_name = '';
  if (isset($account->other)) { // user present in other institute
    $institute_name = $account->institute_name;
  }
  else if (isset($account->extra['hubinstitute_name'])) {
    $institute_name = $account->extra['hubinstitute_name'];
  }
  else if (isset($account->profile->field_institute[0]['nid'])) {
    $ins_id = $account->profile->field_institute[0]['nid'];
    $institute_name = node_load($ins_id)->title;
  }
  else {
    $ins_id = $account->institute_id;
    $institute_name = node_load($ins_id)->title;
  }

  if ($account->extra['secondinstitute_id']) {
    $sec_ins_id = $account->extra['secondinstitute_id'];
    $role_arr = array();
    $role_names =  array(EB_STUDENT, EB_TEACHER);
    $query = db_query("SELECT R.* FROM {role} R WHERE LOWER(R.name) IN (" . db_placeholders($role_names, 'varchar') . ")", $role_names);
    if (db_affected_rows()) {
      while($row = db_fetch_object($query)) {
        $role_arr[$row->rid] = $row->name;
      }
    }
    foreach($role_arr AS $ckkey => $ckvalue) {
      if (array_key_exists($ckkey, $account->roles)) {
        $eb_rid = $ckkey;
        break;
      }
   }
  }
  else if (isset($account->other)) {
    $sec_ins_id = $account->extra['secondinstitute_id'];
  }
  if($eb_rid == 0) {
    $rolename = '';
  }
  else {
    $rolename = ucfirst($system_user_roles[$eb_rid]);
  }
  $tokens = array(
    '!firstlastname' => $firstname . ' '  . $lastname,
    '!firstname' => $firstname,
    '!lastname' => ucfirst($lastname),
    '!institutename' => ucfirst($institute_name),
    '!secondinstitutename' => $sec_ins_id ? ucfirst(node_load($sec_ins_id)->title) : '',
    '!rolename' => $rolename,
    '!ebmail' => $eb_mail,
    '!eb_notes' => $eb_notes,
    '!site' => variable_get('site_name', 'Drupal'),
    '!eb_site_mail' => variable_get('site_mail', ini_get('sendmail_from')),
    '!login_url' => l(user_pass_reset_url($account).'/login',user_pass_reset_url($account).'/login'),
    '!uri' => $base_url,
    '!uri_brief' => preg_replace('!^https?://!', '', $base_url),
    '!mailto' => $account->mail,
    '!date' => format_date(time(), 'medium', '', NULL, $language->language),
    '!login_uri' => url('user', array('absolute' => TRUE, 'language' => $language)),
    '!edit_uri' => l(url('user/' . $account->uid . '/edit', array('absolute' => TRUE, 'language' => $language)), url('user/' . $account->uid . '/edit', array('absolute' => TRUE, 'language' => $language))),
    '!click_here' => l('click here', url('user/' . $account->uid . '/edit', array('absolute' => TRUE, 'language' => $language)))
  );
  return $tokens;
}

/**
* To generate mail
*
* @param $from_name
*  It contains from user name
*
* @param $from_mail
*  It contains from user mail id
* @param $to_mail
*  It contains to user mail id
* @param $subject
*  It contains mail subject
* @param $body
*  It contains mail body
* @package $mail_id
*  It contains mail id to alter this mail
*
* @return $result
*  It contains mail sent status
*
*/
function custom_mail($from_name = 'EducationHub Admin', $from_mail, $to_mail, $subject, $body, $mail_id = 'educationhub_mail') {
 $headers = array(
   'MIME-Version' => '1.0',
   'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
   'Content-Transfer-Encoding' => '8Bit',
   'X-Mailer' => 'Drupal',
 );
 $result = drupal_mail_send($message = array(
    'id' => $mail_id,
    'to' => $to_mail,
    'from' => $from_name . '<'. $from_mail . '>',
    'subject' => $subject,
    'body' => $body,
    'headers' => $headers,
  ));
  // Log errors
  if (!$result) {
    watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);
    drupal_set_message(t('Unable to send e-mail. Please contact the site administrator if the problem persists.'), 'error');
  }
 return $result;
}



/*
 * New register thank you page
*/

function eb_user_reg_thanks() {
  if (isset($_SESSION['eb_user_successive_reg'])) {
    //drupal_add_css(drupal_get_path('module', 'eb_self_registration') .'/templates/eb_self_registration.css', 'theme');
    $output = '<div>Thanks for registering with the EducationHub!</div>';
    $output .= '<div>Your registration has been queued for moderation. You will hear from our Admin team shortly.</div>';
    drupal_get_messages('status');
    unset($_SESSION['eb_user_successive_reg']);
    return $output;
  }
  else {
    drupal_goto('user/login');
  }
}

/*
 * Blocked user page
*/

function eb_user_blocked_user() {
  if(isset($_SESSION['eb_user_blocked_user'])) {
    $institutename = _eb_get_users_institute_name($_SESSION['eb_user_blocked_user']);
    $token_replacements = array(
    	'!institutename' => $institutename
		);
    $body = '<div>You have already submitted your details in !institutename. Your registration details is queued for Administrator&rsquo;s review and approval. For further information contact your institution&rsquo;s Administrator..</div>';
    $body =  strtr($body, $token_replacements);
    drupal_get_messages('error');
   // unset($_SESSION['eb_user_blocked_user']);
    return $body;
  }
  else {
    drupal_goto('user/login');
  }
}


function eb_user_active_user() {
  if(isset($_SESSION['eb_user_active_user'])) {
    $institutename = _eb_get_users_institute_name($_SESSION['eb_user_active_user']);
    $site = variable_get('site_name', 'Education hub');
    $token_replacements = array(
      '!institutename' => $institutename,
      '!site' => $site
		);
    $body = '<div>You have already registered with !institutename, please use the one-time login link sent to your email ID to login !site and change your password.</div>';
    $body =  strtr($body, $token_replacements);
    drupal_get_messages('error');
    unset($_SESSION['eb_user_active_user']);
    return $body;
  }
  else {
    drupal_goto('user/login');
  }
}

function eb_password_reset_page() {
  if (isset($_SESSION['eb-password-reset-page'])) {
    $body = '<div>The instruction to reset your password has been sent to your E-Mail ID. Please use the one-time login link in the mail and change your password.</div>';
    drupal_get_messages('status');
    unset($_SESSION['eb-password-reset-page']);
    return $body;
  }
  else {
    drupal_goto('user/login');
  }
}


function eb_cross_register() {
  if (isset($_SESSION['eb_cross_register'])) {
    if ($_SESSION['eb_cross_register']->other) {
      $firstlastname = ucfirst($_SESSION['eb_cross_register']->load->profile->field_profile_first_name[0]->value) . ' ' . $_SESSION['eb_cross_register']->load->profile->field_profile_last_name[0]->value;
      $institutename = $_SESSION['eb_cross_register']->institute_name;
      $institutelink = l($institutename, $_SESSION['eb_cross_register']->institute_url.'/user/login');
    }
    else {
      $eb_user_data = _eb_get_users_institute($_SESSION['eb_cross_register']);
      $firstlastname = ucfirst($eb_user_data->field_profile_first_name[0]['value']) . ' ' . $eb_user_data->field_profile_last_name[0]['value'];
      $institutename = $eb_user_data->institute->title;
      $institutelink = l($institutename, 'user/login');
    }

    $token_replacements = array(
      '!institutename' => $institutename,
      '!firstlastname' => $firstlastname,
      '!institutelink' => $institutelink,
      '!site' => $site
		);
    drupal_get_messages('error');
    $body = '<div>You have already registered with !institutename as !firstlastname. You cannot register again with another Institute. Please login at !institutelink to continue access.</div>';
    $output =  strtr($body, $token_replacements);
    unset($_SESSION['eb_cross_register']);
    return $output;
  }
  else {
    drupal_goto('user/login');
  }
}

/*
 *
 *Get user's institute name
*/
function _eb_get_users_institute_name($info = array()) {
  if (count($info)) {
    if (isset($info->institute_id)) {
      return node_load($info->institute_id)->title;
    }
    else {
      $t_uid = $info->uid;
      $pf_user =  content_profile_load('profile', $info->uid,  '', TRUE);
      return node_load($pf_user->field_institute[0]['nid'])->title;
    }
  }
  else {
    return '';
  }
}

/*
 *
 *Get user's institute name
*/
function _eb_get_users_institute($info = array()) {
  if (count($info)) {
    $t_uid = $info->uid;
    $pf_user =  content_profile_load('profile', $info->uid,  '', TRUE);
    $pf_user->institute = node_load($pf_user->field_institute[0]['nid']);
    return $pf_user;
  }
}
