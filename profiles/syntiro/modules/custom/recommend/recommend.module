<?php
// $Id$: recommend.module,v 1.55.2.45 2010/09/17 15:48:46 bala Exp $
/**
 * Implementation of hook_menu().
 */
function recommend_menu() {
  $items = array();
  //admin settings
  $items['admin/settings/recommend'] = array(
    'title' => 'Recommend Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recommend_settings_form'),
    'access arguments' => array('administer recommend'),
    'type' => MENU_NORMAL_ITEM,
  );
  //node link
  //$items['recommend'] = array(
  //  'title' => 'Recommend',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('recommend_form'),
  //  'access arguments' => array('access recommend'),
  //  'type' => MENU_CALLBACK,
  //);
  $items['recommend/decline/%recommend'] = array(
    'title' => 'Decline',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('decline_confirmation_form'),
    'access arguments' => array('access recommend'),
    'type' => MENU_CALLBACK,
  );
  $items['recommend/%recommend/decline/confirm'] = array(
    'title' => 'Decline',
    'page callback' => 'decline_recommend',
    'page arguments' => array(1),
    'access arguments' => array('access recommend'),
    'type' => MENU_CALLBACK,
  );
  $items['bridge/myrecommendations'] = array(
    'title' => 'Recommendations',
    'page callback' => 'recommendations_new_page',
    'access arguments' => array('access recommend'),
    'type' => MENU_CALLBACK,
    'weight' => -9,
  );
  $items['recommendations/open'] = array(
    'title' => 'Recommendations',
    'page callback' => 'recommendations_page_open',
    'access arguments' => array('access recommend'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/recommendations'] = array(
    'title' => 'Recommendations Statistics',
    'page callback' => 'recommendations_statistcis_page',
    'access arguments' => array('administer recommend'),
  );
  //Recommend block - ajax load
  $items['recommendations/block'] = array(
    'page callback' => 'recommend_block_ajax',
    'access arguments' => array('access recommend'),
    'type' => MENU_CALLBACK,
  );
  // recommendation listin - ajax load
  $items['recommendations/listing'] = array(
    'page callback' => 'recommend_listing_ajax',
    'access arguments' => array('access recommend'),
    'type' => MENU_CALLBACK,
  );
  //Listing User's Community for Recommendation (New Design)
  $items['group/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recommend_group_list_form'),
    'access arguments' => array('access recommend'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Custom function to create Community Popup form for Recommend and Assignment functionality.
 *
 */
function recommend_group_list_form(){
  global $user;
  //Adding JS for Community Popup functionality.
  drupal_add_js(drupal_get_path('module', 'recommend') .'/recommend.js');
  $form = array();
  $flag = 0;
  if (arg(1) == 'recommendation') {
    $form['#prefix'] = '<div class="recommend-form-community">';
    $form['#suffix'] = '</div>';
  }
  else {
    $form['#prefix'] = '<div class="assignment-form-community">';
    $form['#suffix'] = '</div>';
  }
  if(count($user->og_groups) > 0){
    //Select All Check Box.
    $form['field']['select_all'] = array(
      '#type' => 'checkbox',
      '#id' => 'check-all',
    );
    $form['field']['select_all_markup'] = array(
      '#type' => 'markup',
      '#value' => t('Select all'),
    );
    if (arg(1) == 'recommendation' || !is_numeric(arg(3))) {
      $flag = 1;
      foreach($user->og_groups as $key => $val) {
        generate_community($key, $val['title'], &$form);
      }
    }
    else if(is_numeric(arg(3)) && arg(4) == 'groups') {
      // This query will result all the groups which are already assigned by this user from assignment table.
      $result = db_query("SELECT to_gid FROM {assignment} WHERE from_uid = %d AND st_id = %d AND to_gid != %d GROUP by to_gid", $user->uid, arg(3), 0);

      while ($obj = db_fetch_array($result)) {
        $prefix[] = implode(',', $obj);
      }
      // Fetching only the key values from the $user->og_groups array.
      $fields = array_keys($user->og_groups);
      // if there is no groups assigned already by this teacher it will be traverse to else part.
      if ($prefix) {
        // Getting difference between the two arrays.
        $diff_keys = array_diff($fields, $prefix);
      } else {
        // Getting only the keys of the array $user->og_groups.
        $diff_keys = array_keys($user->og_groups);
      }
      foreach ($diff_keys as $key => $val) {
        // By using this node_load we will get all the values related to the specific group.
        $groups[] = node_load($val);
      }
      // $groups will get the end result.
      if (!empty($groups)) {
        foreach ($groups as $key => $val) {
          if (node_title($val->nid, TRUE) == 'community_interest_group') {
                $query = db_result(db_query("SELECT count(*) FROM {og_uid} ou INNER JOIN {users} u ON ou.uid = u.uid INNER JOIN {users_roles} ur ON ur.uid = u.uid WHERE ou.nid = %d AND u.status > 0 AND ou.is_active >= 1 AND ou.is_admin >= 0 AND ur.rid = %d", $val->nid, 4));
                // assigning the title value to options which will be displayed in drop down.
                if ($query) {
                  $flag = 1;
                  generate_community($val->nid, $val->title, &$form);
                }
          }
        }
      }
    }
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Add',
    );
  }
  else{
    $form['field']['#null_content'] = array(
      '#type' => 'markup',
      '#value' => 'You have no community.',
    );
  }
  if ($flag == 0 && arg(1) != 'recommendation') {
    $form['field']['#null_content'] = array(
      '#type' => 'markup',
      '#value' => 'You have no community.',
    );
  }
  $form['#theme'] = 'recommend_group_list_form_theme';
  return $form;
}

/**
 * Generate community hidden fields
 *
 * @param $key
 *  It contains node id
 *
 * @param $t
 *
 */
function generate_community($key, $title, &$form) {
  $form['field'][$key]['check' . $key] = array(
    '#type' => 'checkbox',
    '#id' => 'check-' . $key,
  );
  $form['field'][$key]['hidden_name' . $key] = array(
    '#type' => 'hidden',
    '#value' => check_plain($title),
  );
  $form['field'][$key]['hidden_id' . $key] = array(
    '#type' => 'hidden',
    '#value' => $key,
  );
  $form['field'][$key]['group' . $key] = array(
    '#type' => 'markup',
    '#value' => check_plain($title),
  );
  $uid_Group = db_query("SELECT ur.uid, ur.rid FROM {users_roles} ur LEFT JOIN {og_uid} ou ON ur.uid = ou.uid WHERE ou.nid = %d", $key);
  while($roles = db_fetch_array($uid_Group)){
    //Construct Student array.
    if($roles['rid'] == '4'){
      $student_count[$roles['uid']] = $roles['uid'];
    }
    else if($roles['rid'] == '5'){//Construct Teacher array.
      $teacher_count[$roles['uid']] = $roles['uid'];
    }
  }

  $form['field'][$key]['group' . $key . 'member'] = array(
    '#type' => 'markup',
    '#value' => format_plural(count($student_count), '1 Student', '@count Students') . ' ' . format_plural(count($teacher_count), '1 Teacher', '@count Teachers'),
  );
  return $form;
}

/**
 * Custom theme function for Recommend Community popup form.
 */
function theme_recommend_group_list_form_theme($form){
  $output = '<div class="recommend-wrapper">';
  //If this div structure will change this form won't work. Because we handle this form submit through jquery.
  if($form['field']['select_all']){
    $output .= '<div class="select-all-main clearfix">';
    $output .= drupal_render($form['field']['select_all']);
    $output .= '<span class="select-all-arrow"></span>';
    $output .= drupal_render($form['field']['select_all_markup']);
    $output .= '</div>';
  }

  if(!$form['field']['#null_content']){
    $output .= '<div class="recommend-group-listing">';
    if(count($form['field']) > 0){
      foreach($form['field'] as $key => $val){
        if(is_numeric($key)){
          $output .= '<div class="recommend-group-block clearfix">';
          $output .= drupal_render($val['check' . $key]);
          $output .= '<div class="recommend-group-detail">';
          $output .= '<div class="recommend-group-name">' . drupal_render($val['group' . $key]) . '</div>';
          $output .= '<div class="recommend-group-mem-count">' . drupal_render($val['group' . $key . 'member']) . '</div>';
          $output .= '</div>';
          $output .= drupal_render($val['hidden_name' . $key]);
          $output .= drupal_render($val['hidden_id' . $key]);
          $output .= '</div>';
        }
      }
    }
    $output .= '</div>';
  }
  elseif($form['field']['#null_content']){
    $output .= '<div class="null-community">';
    $output .= drupal_render($form['field']['#null_content']);
    $output .= '</div>';
  }

  $output .= drupal_render($form['submit']);
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function recommend_theme() {
  return array(
    'recommend_form_theme' => array(
      'arguments' => array('form' => NULL),
    ),
    'recommendations_new_page' => array(
      'template' => 'recommendations_listing',
      'arguments' => array('results' => NULL),
    ),
    'recommend_input_theme' => array(
      'arguments' => array('elements' => NULL),
    ),
    'recommend_group_list_form_theme' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function recommend_perm() {
  return array('access recommend', 'administer recommend');
}

/**
 * Implementation of hook_form_alter().
 * content type based configuration
 */
function recommend_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url;
  switch ($form_id) {
    case 'node_type_form':
      if (isset($form['identity']['type'])) {
        $form['recommend_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Recommend ratings'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#description' => t('To recommend this content, enable checkbox below.'),
        );
        $form['recommend_settings']['recommend'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable Recommendation for nodes.'),
          '#default_value' => variable_get('recommend_'. $form['#node_type']->type, 0),
          '#return_value' => 1,
        );
        $form['#submit'][] = 'recommend_node_type_form_submit';
      }
      break;
    case 'decline_confirmation_form':
      // Div structure is for recommedation confirm delete
      $form['description']['#prefix'] = '<div class="result"><div class="confirm-text">';
      $form['description']['#suffix'] = '</div></div>';
      $form['actions']['#prefix']= '<div class="button-main">';
      $form['actions']['#suffix'] = '</div>';
      $form['actions']['cancel']['#prefix'] = '<span class="btn-center">';
      $form['actions']['cancel']['#suffix'] = '</span>';
      break;
  }
}

/**
 * Create the Field Items For Recommend Settings in Database
 */
function recommend_node_type_form_submit($form, &$form_state) {
  if ($form_state['values']['recommend'] == 1) {
    variable_set('recommend_'. $form_state['values']['type'], 1);
  }
  else {
    variable_set('recommend_'. $form_state['values']['type'], 0);
  }
}


/**
 * admin setting to configure recommend mail
 */
function recommend_settings_form() {
  $form[] = array();
  $form['recommend' ]= array(
    '#type' => 'fieldset',
    '#title' => 'Recommend Setting',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['recommend']['recommend_subject'] = array(
    '#type' => 'textfield',
    '#title' => 'Subject',
    '#default_value' => variable_get('recommend_subject', ''),
  );
  $form['recommend']['recommend_body'] = array(
    '#type' => 'textarea',
    '#title' => 'Body',
    '#default_value' => variable_get('recommend_body', ''),
  );
  return system_settings_form($form);
}

/**
 *
 * Theme function for Recommend, Assignment form User's Input field.
 *
 */
 function theme_recommend_input_theme($element) {
  $size = empty($element['#size']) ? '' : ' size="' . $element['#size'] . '"';
  $maxlength = empty($element['#maxlength']) ? '' : ' maxlength="' . $element['#maxlength'] . '"';
  $class = array('form-text');
  $extra = '';
  $output = '';
  if ($element['#autocomplete_path'] && menu_valid_path(array('link_path' => $element['#autocomplete_path']))) {
    drupal_add_js('misc/autocomplete.js');
    $class[] = 'form-autocomplete';
    $extra =  '<input class="autocomplete" type="hidden" id="' . $element['#id'] . '-autocomplete" value="' . check_url(url($element['#autocomplete_path'], array('absolute' => TRUE))) . '" disabled="disabled" />';
  }
  _form_set_class($element, $class);
  if (isset($element['#field_prefix'])) {
    $output .= '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ';
  }
  $output .= '<input type="text"' . $maxlength . ' name="' . $element['#name'] . '" id="' . $element['#id'] . '"' . $size . ' value="' . check_plain($element['#value']) . '"' . drupal_attributes($element['#attributes']) . ' />';
  if (isset($element['#field_suffix'])) {
    $output .= ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>';
  }
  //Check whether the Input field is in Recommend or Assignment.
  $output  = '<div class="recommend-to-input">' . $output . '</div>';
  return theme('form_element', $element, $output) . $extra;
}


/**
 * The main Recommend form that gets triggered when we click recommend
 * The form allows you to recommend a node to a user or flag it to a group
 * On form submit an emial is sent to a user with the node link oR
 * To all the users of the Group
 *
 *
 * @see recommend_form_submit()
 */
function recommend_form($form_state, $asset = NULL, $rec_options = 1, $link_title = NULL, $rec_link = NULL, $link_desc = NULL) {
  global $user, $base_url;
  //set_form_back_url();
  require_once(drupal_get_path('module', 'privatemsg') . '/privatemsg.module');

  drupal_add_js(drupal_get_path('module', 'recommend') .'/recommend.js');
  //Adding this JS file for Json Parsing functionality in User Search Popup
  drupal_add_js(drupal_get_path('module', 'eb_search') . '/js/json_parse.js');
  drupal_add_js(drupal_get_path('module', 'eb_search') . '/js/eb_search_popup.js');

  //Adding JS files, Setting variable for Recommendation autocomplete.
  drupal_add_js(array('basepath' => $base_url), 'setting');

  //Adding Jquery UI js files for Autocomplete functionality in Recommen Form.
  if (function_exists("jquery_ui_add")) {
    jquery_ui_add(array('ui.widget', 'ui.position', 'ui.autocomplete'));
  }
  drupal_add_js(drupal_get_path('module', 'assignment') . '/js/custom_autocomplete.js');
  $form = array();
  //Adding a div for whole form.
  $form['#prefix'] = '<div class="recommend-new-form">';
  $form['#suffix'] = '</div>';

  //Create a hidden type field for Recommend field.
  $form['rec_options'] = array(
    '#type' => 'hidden',
    '#value' => $rec_options,
  );
  $form['rec_groups'] = array(
   '#type' => 'textfield',
   '#default_value' => '',
   '#title' => t('Communities'),
   '#rules' => array('check_empty'),
   '#size' => 2000,
   '#theme' => 'recommend_input_theme',
   '#attributes' => array('readonly' => 'readonly'),
   //'#required' => TRUE,
  );
  $form['rec_recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#default_value' => '',
    '#size' => 10000,
    '#maxlength' => 10000,
    '#rules' => array('check_empty'),
    '#theme' => 'recommend_input_theme',
  );
  //Adding Modal Frame JS. (New Design)
  if(module_exists('modalframe')) {
    modalframe_parent_js();
    drupal_add_js(drupal_get_path('module', 'modalframe_example') . '/modalframe_example.js');
  }
  
  $authorname = function_exists("create_eduauthor")?create_eduauthor($user->uid, NULL, TRUE):$user->name;
  //check if this is for internal link or external link
  //and set the details
  if (is_numeric($asset)) {
    //node id is passed as argument 1, so get the node details
    $nodeobj = node_load($asset);
    $subject = t(variable_get('recommend_subject', ''), array('!title' => $nodeobj->title));
    $body = t(variable_get('recommend_body', ''), array('!url' => $base_url . '/' . $nodeobj->path, '!name' => $authorname));
    $asset = $nodeobj->nid;
    $type = $nodeobj->type;
    $link_title = '';
    $link_desc = '';
  }
  else {
    $subject = t(variable_get('recommend_subject', ''), array('!title' => $link_title));
    $body = t(variable_get('recommend_body', ''), array('!url' => $rec_link, '!name' => $authorname));
  }
  $form['rec_subject'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Subject'),
    '#size' => 50,
    '#maxlength' => 80,
    '#default_value' => $subject,
  );
  $form['rec_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#required' => TRUE,
    '#rows' => 6,
    '#default_value' => $body,
    '#resizable' => TRUE,
  );
  $form['rec_asset'] = array(
    '#type' => 'hidden',
    '#value' => $asset,
  );
  $form['rec_node_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );
  $form['rec_link_title'] = array(
    '#type' => 'hidden',
    '#value' => $link_title,
  );
  $form['rec_link'] = array(
    '#type' => 'hidden',
    '#value' => $rec_link,
  );
  $form['rec_link_desc'] = array(
    '#type' => 'hidden',
    '#value' => $link_desc,
  );
  $form['rec_submit'] = array(
    '#prefix' => '<div class="button-main">',
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#suffix' => '</div>',
  );
  
  $form['#theme'] = 'recommend_form_theme';
  $form['#validate'][] = 'recommend_validate';
  return $form;
}

/**
 *
 *Theme function for Recommend form.
 *
 */
function theme_recommend_form_theme($form){
  //Construct custom select box in Recommend form page
  $output = '<a class="close" title="Close" href="#">Close</a>';
  $output .= '<div class="recommend-to clearfix"><div class="recommend-options"><span>To: </span><div class="selected-dropdown"><div class="selected-list"><div class="seleted-option">Users</div></div>';
  $output .= '<div id="assign-available-option"><div class="user-option">Users</div><div class="group-option">Communities</div></div>';
  $output .= '</div></div>';
  $output .= drupal_render($form['rec_recipient']) . '<div class ="user-search-img">' . l(theme_image(drupal_get_path('theme', 'educationhub') . "/images/browse-button.png", "Browse", "Browse"), 'popupsearch/recommend', array('attributes' => array('class' => 'popups user-search-img-link', 'title' => 'Browse to add users'), 'html' => TRUE)) . '</div>';
  $output .= drupal_render($form['rec_groups']) . '<div class ="group-search-img">' . l(theme_image(drupal_get_path('theme', 'educationhub') . "/images/browse-button.png", "Browse", "Browse"), 'group/recommendation', array('attributes' => array('class' => 'popups group-search-img-link', 'title' => 'Browse to add communities'), 'html' => TRUE)) . '</div>';
  $output .= '</div>';

  //$output .= drupal_render($form['rec_options']);
  $output .= '<div class="rec-detail">';
  $output .= drupal_render($form['rec_subject']);
  $output .= drupal_render($form['rec_body']);
  $output .= drupal_render($form['rec_asset']);
  $output .= drupal_render($form['rec_node_type']);
  $output .= drupal_render($form['rec_link_title']);
  $output .= drupal_render($form['rec_link_desc']);
  $output .= drupal_render($form['rec_submit']);
  $output .= drupal_render($form['rec_cancel']) . '</div>';

  $output .= drupal_render($form);
  return $output;
}

/*
 * Implementing hook_validate().
 *
 * It is used to validate the custom recommend form
 *
 * @param
 *   $form
 *     It contains value from the form
 *
 *   $form_state
 *     It contains reference object of the form
 *
 * $return
 *    It returns the form set error message
 *
 */
function recommend_validate($form, &$form_state) {
 switch ($form['rec_options']['#post']['rec_options']) {
  case 1:
    if (!$form['rec_recipient']['#post']['rec_recipient'] || ctype_space($form['rec_recipient']['#post']['rec_recipient'] )) {
      form_set_error('rec_recipient', t('User name cannot be empty'));
    }
    else{
      //Check whether the entered User name is valid or not.
      $to_users = explode(',', $form_state['values']['rec_recipient']);
      /* Checking for Null content in Array Final Element*/
      if (trim($to_users[count($to_users)-1]) == '') {
        array_pop($to_users);
      }
      $not_user = array();
      foreach ($to_users as $key => $val) {
        if (trim($val)) {
           $rec = array();
          $temp_user = user_load(array('mail' => trim($val)));
          //If not a valid user we construct an array for invalid user name.
          if(!$temp_user){
            $not_user[trim($val)] = trim($val);
          }
        }
      }
      //If not a valid user we construct string on invalid user names.
      $not_user_str = implode(", ", $not_user);
      if($not_user_str){
        if(count($not_user) > 1){
          form_set_error('rec_recipient', t($not_user_str . ', are not valid users. Please correct and reselect users.'));
        }
        else{
          form_set_error('rec_recipient', t($not_user_str . ', is not a valid user. Please correct and reselect user.'));
        }
      }
    }
  break;
  case 2:
    if (!$form['rec_recipient']['#post']['rec_groups']) {
      form_set_error('rec_groups', t('Please select atleast one community.'));
    }
  break;
 }
}

/**
 * Function for Recommend an asset to no of group's..
 *
 **/
function recommend_to_group($rec_asset_nid, $from_uid, $from_rid, $to_gid, $to_uids, $rec_type, $rec_link_title, $rec_link_desc, $rec_time, $status){
  db_query("INSERT INTO {recommend}
    (asset, from_uid, from_rid, to_gid, to_uid, type, title, description, timestamp, status)
    VALUES
    ('%s', %d, %d, %d, %d, '%s', '%s',  '%s', %d, %d)",
    $rec_asset_nid, $from_uid, $from_rid, $to_gid, $to_uids, $rec_type, $rec_link_title, $rec_link_desc, $rec_time, $status);
  //clear the cache
  cache_clear_all("recommend_listing:uid:" . $to_uids . ":", "cache_eb", TRUE);
  cache_clear_all("recommend_basket:uid:" . $to_uids . ":", "cache_eb", TRUE);
  // for mobile clear cache
  cache_clear_all("recommend_mobile:uid:" . $to_uids . ":", "cache_eb", TRUE);
}

/**
 *
 * Function for Recommend an asset to no of user's..
 *
 */
function recommend_to_user($rec_asset_nid, $from_uid, $from_rid, $to_uid, $rec_type, $rec_link_title, $rec_link_desc, $rec_time, $status){
  db_query("INSERT INTO {recommend}
    (asset, from_uid, from_rid, to_uid, type, title, description, timestamp, status)
    VALUES
    ('%s', %d, %d, %d, '%s', '%s',  '%s', %d, %d)",
    $rec_asset_nid, $from_uid, $from_rid, $to_uid, $rec_type, $rec_link_title, $rec_link_desc, $rec_time, $status);
   //clear the cache
  cache_clear_all("recommend_listing:uid:" . $to_uid . ":", "cache_eb", TRUE);
  cache_clear_all("recommend_basket:uid:" . $to_uid . ":", "cache_eb", TRUE);
  // for mobile clear cache
  cache_clear_all("recommend_mobile:uid:" . $to_uid . ":", "cache_eb", TRUE);
}

/**
 *
 * Form submission handler for recommend_form().
 *
 * @see privatemsg_mail_send() is in asset.module should be changed to eb_others.module
 * @see recommend_to_group().
 * @see recommend_to_user().
 */
function recommend_form_submit($form, &$form_state) {
  global $user;
  $status = '0';
  _save_recomment($user, $form_state['values']['rec_asset'], FALSE, FALSE, $form_state['values']['rec_recipient'], $form_state['values']['rec_groups'], $form_state['values']['rec_subject'], $form_state['values']['rec_body'], $form_state['clicked_button']['#post']['rec_asset'], $form_state['clicked_button']['#post']['rec_node_type'], $form_state['clicked_button']['#post']['rec_link_title'], $form_state['clicked_button']['#post']['rec_link_desc'], $form_state['clicked_button']['#post']['rec_link']);
}

/**
 * Implementation of recommend save
 *
 * @param $rec_user
 *  It contains users information
 * @param $nid
 *  It contains node id
 * 
 *
 *  
 */
function _save_recomment($rec_user, $nid, $recipient_user_status = TRUE, $recipient_group_status = FALSE, $receipient = NULL, $groups = NULL, $subject = NULL, $body = NULL, $rec_asset = NULL, $rec_node_type = NULL, $rec_link_title = NULL, $rec_link_desc = NULL, $rec_link_url = NULL) {
  /* Get User's Role ID */
  //Role Id 4 for Student, 5 for Teacher.
  if ($rec_user->roles[4]) {
    $from_rid = '4';
  }
  elseif ($rec_user->roles[5]) {
    $from_rid = '5';
  }
  $nodeobj = node_load($nid);
  // Recommend to Users
  if ($receipient) {
    $to_users = explode(',', $receipient);
    /* Checking for Null content in Array Final Element*/
    if (trim($to_users[count($to_users)-1]) == '') {
      array_pop($to_users);
    }
    foreach ($to_users as $key => $val) {
      if (trim($val)) {
        $rec = array();
        $temp_user = user_load(array('mail' => trim($val)));
        recommend_to_user($rec_asset, $rec_user->uid, $from_rid, $temp_user->uid, $rec_node_type, $rec_link_title, $rec_link_desc, time(), $status);
        $rec[$temp_user->uid] = $temp_user;
        $user_links[] =  eb_others_popup_link($val, 'user/' . $temp_user->uid);
        // To send mail
        if (is_array($rec) && (count($rec) > 0)) {
          privatemsg_mail_send($rec, $rec_user, t("Recommend: ". $subject), t($body));          
        }
        // start:: for user points calculation
        // user  defined hook: hook_eb_points;
          $points = array();
          $points['type']  = 'recommend';
          $points['from_uid']  = $rec_user->uid;
          $points['to_uid']  = $temp_user->uid;
          module_invoke_all('eb_points', 'after save', $points);
        // stop        
      }
    }
    $user_list = $user_links?implode(', ', $user_links):' ';
    //Check If recommend asset is node or external link
    if($nodeobj){
      drupal_set_message('Your Recommendation, '. l($nodeobj->title, 'node/' . $nodeobj->nid, array('attributes' => array('target' => '_blank'), 'html' => TRUE)) .', has been sent to '. $user_list .'.');
      watchdog('recommend', 'Your Recommendation, '. l($nodeobj->title, 'node/' . $nodeobj->nid, array('html' => TRUE)) .', has been sent to '. $user_list .'.');
    }
    else {
      drupal_set_message('Your Recommendation, '. l($rec_link_title, $rec_link_url, array('attributes' => array('target' => '_blank'), 'html' => TRUE)) .', has been sent to '. $user_list .'.');
      watchdog('recommend', 'Your Recommendation, '. l($rec_link_title, $rec_link_url, array('html' => TRUE)) .', has been sent to '. $user_list .'.');
    }
  }
  // Recommend to groups.. Get UId of Member associated Course group..
  if ($groups) {
    $to_groups = explode(',', $groups);
    /* Checking for Null content in Array Final Element*/
    if (trim($to_groups[count($to_groups)-1]) == '') {
      array_pop($to_groups);
    }
    if(count($to_groups) > 0){
      foreach ($to_groups as $key => $value) {
        $group[] = l(node_title($value), 'node/' . $value);
        $uid_Group = db_query("SELECT uid FROM (og_uid) WHERE nid=%d", $value);
        while ($result_Uid = db_fetch_object($uid_Group)) {
          $rec = array();
          $temp_user = user_load(array('uid' => $result_Uid->uid));
          recommend_to_group($rec_asset, $rec_user->uid, $from_rid, $value, $result_Uid->uid, $rec_node_type, $rec_link_title, $rec_link_desc, time(), $status);
          $rec[$temp_user->uid] = $temp_user;
          // To send mail
          if (is_array($rec) && (count($rec) > 0)) {
            privatemsg_mail_send($rec, $rec_user, t("Recommend: ". $subject), t($body));            
          }
          // start:: for user points calculation
          // user  defined hook: hook_eb_points;
           $points = array();
           $points['type']  = 'recommend';
           $points['from_uid']  = $rec_user->uid;
           $points['to_uid']  = $temp_user->uid;
           module_invoke_all('eb_points', 'after save', $points);
          // stop        
        }
      }
    }
    $group_list = $group?implode(', ', $group):' ';
    //Check If recommend asset is node or external link
    if($nodeobj) {
      drupal_set_message('Your Recommendation, '. l($nodeobj->title, 'node/' . $nodeobj->nid, array('attributes' => array('target' => '_blank'), 'html' => TRUE)) .', has been sent to '. $group_list .'.');
      watchdog('recommend', 'Your Recommendation, '. l($nodeobj->title, 'node/' . $nodeobj->nid, array('html' => TRUE)) .', has been sent to '. $group_list .'.');
    }
    else {
      drupal_set_message('Your Recommendation, '. l($rec_link_title, $rec_link_url, array('attributes' => array('target' => '_blank'), 'html' => TRUE)) .', has been sent to '. $group_list .'.');
      watchdog('recommend', 'Your Recommendation, '. l($rec_link_title, $rec_link_url, array('html' => TRUE)) .', has been sent to '. $group_list .'.');
    }
  }
  // Apache Solr Index Purpose
  if (module_exists('apachesolr')) {
    _apachesolr_nodeapi_update($nodeobj);
  }
}
/**
 * Decline Form for Recommendation
 *
 *
 *@see decline_confirmation_form_submit().
 *
 *
 */
function decline_confirmation_form() {
  $_SESSION['pre_url'] = request_uri();

  $form = array();
  $node_title = db_result(db_query("SELECT N.title FROM {node} N WHERE nid=(SELECT asset FROM {recommend} WHERE id=%d)", arg(2)));
  if (empty($node_title)) {
    $node_title = db_result(db_query("SELECT title FROM {recommend} WHERE id=%d", arg(2)));
  }
  $form['bid'] = array(
    '#type' => 'hidden',
    '#value' => arg(2),
  );
  return confirm_form($form, $node_title, 'bridge/myrecommendations', t('Are you sure you want to delete this Recommendation?'), 'Yes', 'No');
  return $form;
}
/**
 * delete the recommendation
 *
 * @param $recommend
 *  It contains recommend object
 */
function decline_recommend($recommend){
  global $user;
  if (is_numeric($recommend->asset)) {
    $tite = function_exists("node_title")?node_title($recommend->asset):NULL;
  }
  else {
    $tite = $recommend->title;
  }
  db_query("DELETE FROM {recommend} WHERE id = %d AND to_uid=%d", $recommend->id, $user->uid);
  //clear the cache
  cache_clear_all("recommend_listing:uid:" . $user->uid . ":", "cache_eb", TRUE);
  cache_clear_all("recommend_basket:uid:" . $user->uid . ":", "cache_eb", TRUE);
  // for mobile clear cache
  cache_clear_all("recommend_mobile:uid:" . $user->uid . ":", "cache_eb", TRUE);
  drupal_set_message("Recommended " . $tite . " has been removed");
}

/**
 * Decline Form submit for Recommendation
 *
 * @see decline_confirmation_form().
 *
 *
 */
function decline_confirmation_form_submit($form, &$form_state) {
  $bid = $form_state['values']['bid'];
  global $user;
  if ($form_state['clicked_button']['#value'] == 'Yes') {
    db_query("DELETE FROM {recommend} WHERE id = %d", $bid);
    //clear the cache
    cache_clear_all("recommend_listing:uid:" . $user->uid . ":", "cache_eb", TRUE);
    cache_clear_all("recommend_basket:uid:" . $user->uid . ":", "cache_eb", TRUE);
    // for mobile clear cache
    cache_clear_all("recommend_mobile:uid:" . $user->uid . ":", "cache_eb", TRUE);
  }
  drupal_set_message("Recommendation has been Declined and removed from your list.");
}

/**
 *
 * Recommendation Listing Page - v2 - for bridge/myrecommendations
 *
 *
 * @return
 *  It contains themed HTML output
 *
 * @see external_link_image()
 * @see node_teaser()  is in eb_other.module
 *
 * @see removing_whitespace()
 *  is in eb_others_common.inc
 */
function recommendations_new_page($mobile_flag = FALSE, $scroll_count = FALSE, $tcount_flag = FALSE) {
  global $user, $base_url;
  $i=1;
  $limit = 5;
  drupal_add_js(drupal_get_path('module', 'recommend') . '/recommend.js');
  drupal_add_js(drupal_get_path('module', 'bookmark') . '/bookmark.js');

  //set current page url to back use
  $_SESSION['pre_url'] = request_uri();
  if (arg(0) == "bridge" && arg(1) != "myrecommendations") {
    drupal_add_js(array('bridge_basket' => TRUE), 'setting');
  }
  // Get Recommended list based on where we access this function from.
  if(!$mobile_flag){
    
    
    //get pager values in query string
    $recommend_page = isset($_GET['page']) ? $_GET['page'] : implode(',', array_fill(0, RECOMMEND_LISTING_PAGER_ID + 1, 0));
    // get recommend cache
    $cache_ouput = cache_get("recommend_listing:uid:" . $user->uid . ":page:" . $recommend_page, "cache_eb");
    if ($cache_ouput->data) {
      return $cache_ouput->data;
    }
    else  {
      // check playlist available in playlist basket if available then only add dragable links to listing
      if (function_exists("playlist_query")) {
        $playlist_arguments = array('curriculum', $user->uid, $user->uid, $user->uid, $user->uid);
        $playlist_count = playlist_query(NULL, NULL, $playlist_arguments, TRUE);
      }
      
      //check if user have rights to drag and drop to playlist or asset
      $drop_tooltip = FALSE;
      if (user_access("create curriculum content") || user_access("create asset content")) {
        $drop_tooltip = TRUE;
      }
      
      $count_query = "SELECT COUNT(*) FROM {recommend} WHERE to_uid = %d";
      $output = pager_query("SELECT * FROM {recommend} WHERE to_uid = %d ORDER BY timestamp DESC", $limit, RECOMMEND_LISTING_PAGER_ID, $count_query, $user->uid );
    }
  }
  else {
    $mobile_recommend_page = ($scroll_count) ? $scroll_count : 0;
     // get recommend cache
    $cache_ouput = cache_get("recommend_mobile:uid:" . $user->uid . ":page:" . $mobile_recommend_page, "cache_eb");
    if ($cache_ouput->data) {
      return $cache_ouput->data;
    }
    $start_limit = $scroll_count * 10;
    $limit_query = " LIMIT ". $start_limit .", 10";    
    $output = db_query("SELECT * FROM {recommend} WHERE to_uid = %d ORDER BY timestamp DESC" . $limit_query, $user->uid);
    if($tcount_flag == TRUE){
      $total_count = db_result(db_query("SELECT count(*) FROM {recommend} WHERE to_uid = %d ORDER BY timestamp DESC", $user->uid));
    }
  }
  if(db_affected_rows()){
    while ($row = db_fetch_object($output)) {
      // Check if the result is external link
      if ($row->type == "google" || $row->type == "federated") {
          $title = function_exists("teaser_nodes") ? teaser_nodes($row->title) : NULL;
        $link = $row->asset;
        $link_options = array(
          'html' => TRUE,
          'attributes' => array(
            'target' => '_blank',
            'title' => 'Click to view content'
          )
        );
        // node_teaser() function is to give teaser of the specific node
        $desc =  function_exists("node_teaser") ? node_teaser(strip_tags($row->description), NULL, NULL) : NULL;
        $type = $row->type;
        $by_text = "";
        $author = "";
        // To get Bookmark link
        $bookmark_url = function_exists("bookmark_this_link") ? bookmark_this_link($row->asset, $type, $title, $desc) : NULL;
        // External Link Image
        $thumb = function_exists("external_link_image") ? external_link_image($row->asset, $link, $link_options) : NULL;
        $output2['fields']['links'] = l('More', $row->asset,  array('attributes' => array('nodetype' => $row->type, 'node_title' => $title, 'title' => 'Click to Preview', 'tabindex' => '0')));
  
      }
      else {
        $nodeobj = node_load($row->asset);
        $title = teaser_nodes($nodeobj->title);
        $link = $nodeobj->path;
        $link_options = array('html' => TRUE,);
        // Default teaser
        // For removing whitespaces in teaser is in eb_others_common.inc
        if (function_exists('removing_whitespace')) {
          $desc =  removing_whitespace(node_teaser($nodeobj->body, NULL, NULL));
        }
        $type = $nodeobj->type;
        if($nodeobj->type == 'asset' || $nodeobj->type == 'curriculum'  || $nodeobj->type == 'bead'  || $nodeobj->type == 'quiz') {
          $output2['fields']['links'] = l('More', 'node/' . $row->asset,  array('attributes' => array('nodetype' => $row->type, 'title' => 'Click to Preview')));
        }
  
        $by_text = 'By ';
        $author = function_exists("create_eduauthor") ? create_eduauthor($nodeobj->uid) : NULL;
        $recommend_url = l(theme_image(drupal_get_path('theme', 'edubridge_fluid') . "/images/recommend.png", NULL, 'Recommend'),  "recommend/" . $row->asset, array('attributes' => array('title' => 'Recommend'),'html' => TRUE));
        // To get Bookmark link
        $bookmark_url = function_exists("bookmark_this_link") ? bookmark_this_link($row->asset, $nodeobj->type, $nodeobj->title, $nodeobj->body) : NULL;
  
        $format = $nodeobj->field_format[0]['value'];
        $url = function_exists("searchimagefiles") ? searchimagefiles($nodeobj->type, $format) : NULL; //searchimagefiles() is in eb_search.inc
        //define the the thumb image
        if ($row->type == 'asset') {
          //Get Taxonomy List for Asset Category
          $category = array();
          if ($nodeobj->taxonomy) {
            $category = array();
            foreach ($nodeobj->taxonomy as $value) {
              if ($value->vid == 1) {
                $category[] = $value->name;
              }
            }
          }
          $assetcategory = ($category)?implode(', ',$category):'';
          // for community interest group is group node
          if ($nodeobj->type == "community_interest_group") {
            $desc =  strip_tags($nodeobj->og_description);
          }
          else {
            $desc = strip_tags($nodeobj->teaser);
          }
          $source = $nodeobj->field_source[0]['value'];
          if (function_exists("teaser_nodes")) {
            $thumb = l(teaser_nodes(NULL, 'dis_rev_com_image2', $url), $link, $link_options);
          }
        }
        else {
          if (function_exists("teaser_nodes")) {
            $thumb = l(teaser_nodes(NULL, 'dis_rev_com_image2', $url), $link, $link_options);
          }
          $source = "";
        }
      }
      // For bead sequence No.
      if($row->type == 'bead') {
        // searchimagefiles() function is in Search.inc module
        $url = function_exists("searchimagefiles") ? searchimagefiles($nodeobj->type, $nodeobj->field_format[0]['value']) : NULL;
        if (function_exists("teaser_nodes")) {
          $thumb = l(teaser_nodes(NULL, 'dis_rev_com_image2', $url) . '<span class="bead-small-icon">' . theme_image(drupal_get_path('theme', 'educationhub') . "/images/icons/bead_icon_small.png") . '</span>', $link, $link_options);
        }
        $stringable_beads_link = function_exists("beads_stringable_link") ? beads_stringable_link($row->asset, $nodeobj->field_bead_seq_no[0]['value'], $nodeobj->field_source_id[0]['value']) : NULL;
        $source = $nodeobj->field_source[0]['value'];
        $by_text = '';
        $author = '';
        if ($nodeobj->field_source[0]['value']) {
          $by_text = 'Source ';
          $author = $nodeobj->field_source[0]['value'];
        }
      }
  
      $from_uid = $row->from_uid;
      $from_name = db_result(db_query("SELECT name FROM {users} WHERE uid = '%d'", $from_uid));
      $link2 = "recommendations/open/{$row->id}";
      //check for read status - if 0 then add (new) to the title
      if ($row->status == 0) {
        $title .= " (New)";
      }
      if (function_exists("drag_drop_make_link")) {
        if ($playlist_count == 0 || !$drop_tooltip) {
          $output2['fields']['ext_title'] = drag_drop_make_link($row->asset, $row->title, $row->type, $row->description, check_plain($row->title), 'float-left');
           $output2['fields']['title'] = drag_drop_make_link($row->asset, $row->title, $row->type, $row->description, NULL, 'float-left');
        }
        else {
          $output2['fields']['ext_title'] = drag_drop_make_link($row->asset, $row->title, $row->type, $row->description, 'Drag to Drop into your playlists', 'rec-links float-left');
          $output2['fields']['title'] = drag_drop_make_link($row->asset, $row->title, $row->type, $row->description, 'Drag to Drop into your playlists',  'rec-links float-left');
        }
      }
  
      // For flag content generation
      if ($nodeobj->field_institute[0]['nid'] && function_exists("institution_flag")) {
        $output2['fields']['flag_content'] = NULL;
        $output2['fields']['flag_content'] = institution_flag($nodeobj->field_institute[0]['nid']);
      }
      $output2['fields']['asset'] = $row->asset;
      $output2['fields']['type'] = $type;
      $output2['fields']['body_content'] = truncate_utf8(strip_tags($desc), 200, $wordsafe = FALSE, $dots = TRUE);
      $output2['fields']['bm_id'] = $row->id;
      $output2['fields']['bookmark'] = $bookmark_url;
      $output2['fields']['picture'] = $thumb;
      $output2['fields']['author'] = $author;
      $output2['fields']['from_uid'] = $from_uid;
      $output2['fields']['source'] = $source;
      $output2['fields']['category'] = $assetcategory;
      $output2['fields']['delete'] = l(theme_image(drupal_get_path('theme', 'educationhub') . "/images/icons/delete_icon.png", 'Delete recommendation ' . $title, 'Delete'), "recommend/decline/" . $row->id, array('attributes' => array('class' => 'popups-form-reload', 'on-popups-options' => '{hijackDestination:"FALSE"}', 'title' => 'Remove this recommendation '), 'html' => TRUE));
  
      $output2['fields']['recommendedby'] = $user_url;
      $output2['fields']['fivestar_widget'] = NULL;
      //check the average voting - if zero then dont display the stars
      if (module_exists('fivestar')) {
        $avg_vote = fivestar_get_votes('node', $nodeobj->nid);
        if (isset($avg_vote['average']['value']) > 0 && ($nodeobj->field_published[0]['value'] == 1 || ($nodeobj->status == 1 && $nodeobj->type == 'bead')) ) {
          $output2['fields']['fivestar_widget'] = theme('fivestar_static', $avg_vote['average']['value']);
      
        }
      }
      if ($output2['fields']['type'] == 'asset') {
        $result[$i]['body'] = theme('asset_teaser', $output2);
      }
      elseif ($output2['fields']['type'] == 'bead') {
        $output2['fields']['stringable_beads_link'] = $stringable_beads_link;
        $result[$i]['body'] = theme('bead_teaser', $output2);
      }
      elseif ($output2['fields']['type'] == 'curriculum') {
        $result[$i]['body'] = theme('curriculum_teaser', $output2);
      }
      elseif  ($output2['fields']['type'] == 'federated'){
        $result[$i]['body'] = theme('external_teaser', $output2);
      }
      else {
        $result[$i]['body'] = theme('cck_teaser', $output2);
      }
      //Check the mobile access
      if($mobile_flag){
        $result_mobile[$i] = $output2;
      }    
  
      $i++;
    }
  }
  else{
    //Check the mobile access
    if($mobile_flag){
      $result_mobile['recommend_null'] = 'You have no recommendations.';
    }
    else{
      $result['recommend_null'] = 'You have no recommendations.';
    }
  }

  //Check the mobile access
  if($mobile_flag){
    if($tcount_flag == TRUE){
      $result_mobile['total_count'] = $total_count;
    }
    //set the asset listing cache
    cache_set("recommend_mobile:uid:" . $user->uid . ":page:" . $mobile_recommend_page, $result_mobile, "cache_eb"); 
    return $result_mobile;
  }
  
  if(!$mobile_flag){
    $final_Ouput = theme('recommendations_new_page', $result);
    //set the recommend listing cache
    cache_set("recommend_listing:uid:" . $user->uid . ":page:" . $recommend_page, $final_Ouput, "cache_eb"); 
    return $final_Ouput;
  }

}

/**
 * It is used to assign external link image
 *
 * @param $url
 *  It contains external link url
 *
 * @param $link
 *  It contains Links of that image
 *
 * @param $link_options
 *  It contains Options for that link
 *
 * @return
 *  It returns image with external links
 *
 *
 */
function external_link_image($url, $link, $link_options) {
  if (strpos($url, 'curriki.org') !== false) {
    $thumb = l (theme('imagecache', 'dis_rev_com_image2', '/' . drupal_get_path('theme', 'educationhub') . '/images/icons/curriki_1.jpg'),  $link, $link_options);
  }
  elseif (strpos($url, 'merlot.org') !== false) {
    $thumb = l (theme('imagecache', 'dis_rev_com_image2', '/' . drupal_get_path('theme', 'educationhub') . '/images/icons/merlot_1.jpg'),  $link, $link_options);
  }
  elseif (strpos($url, 'oercommons.org') !== false) {
    $thumb = l(theme('imagecache', 'dis_rev_com_image2', '/' . drupal_get_path('theme', 'educationhub') . '/images/icons/oercommons.jpg'), $link, $link_options);
  }
  elseif (strpos($url, 'free.ed.gov') !== false) {
    $thumb = l (theme('imagecache', 'dis_rev_com_image2', '/' . drupal_get_path('theme', 'educationhub') . '/images/icons/free-ed_1.jpg'),  $link, $link_options);
  }
  elseif (strpos($url, 'cnx.org') !== false) {
    $thumb = l (theme('imagecache', 'dis_rev_com_image2', '/' . drupal_get_path('theme', 'educationhub') . '/images/icons/cnx.jpg'),  $link, $link_options);
  }
  elseif (strpos($url, 'khanacademy.org') !== false) {
    $thumb = l(theme('imagecache', 'dis_rev_com_image2', '/' . drupal_get_path('theme', 'educationhub') . '/images/icons/khanacademy.jpg'), $link, $link_options);
  }
  else {
    $thumb= l (theme('imagecache', 'dis_rev_com_image2', '/' . drupal_get_path('theme', 'educationhub') . '/images/icons/nodoc.jpg'),  $link, $link_options);
  }
  return $thumb;
}

/**
 * Process variables for recommendations_listing.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $vars
 *
 * @see recommendations_listing.tpl.php
 */
function recommend_preprocess_recommendations_new_page(&$vars) {
   // For Student Community interest group listing page
  if (user_access('access new layout') ) {
    $vars['recommend_title'] = 'Recommendations';
  }

  $vars['recommend_result'] = $vars['results'];
  $vars['pager'] = theme('pager', NULL, 5, RECOMMEND_LISTING_PAGER_ID);
}

/**
 *
 * Open a link in the recommendation page
 *
 *
 * Make the recomemndation status to 1 (read) if not read and then redirect to specific page
 *
 *
 */
function recommendations_page_open() {
  global $base_url;
  $rec = recommend_load(arg(2));
  //check the status - if unread change to read
  if ($rec->status == 0)
    db_query("UPDATE {recommend} SET status = 1 WHERE id = %d", arg(2));
  //redirect the page according to the type
  if ($rec->type == "google" || $rec->type == "federated") {
    $link = $rec->asset;
  }
  else {
    $link = "node/{$rec->asset}";
  }
  drupal_goto($link);
}

/**
 * Function For Recommendation Statistics Listing Page
 *
 * It is used to check statistics of the recommend page
 *
 *
 *
 */
function recommendations_statistcis_page() {
  //make the table having sortable headers
  $headers = array(
    array('data' => t('Asset/Link'), 'field' => 'asset'),
    array('data' => t('Teacher Recommendations'), 'field' => 'teachers'),
    array('data' => t('Student Recommendations'), 'field' => 'students'),
    array('data' => t('Total Recommendations'), 'field' => 'cnt', 'sort' => 'desc'),
  );
  $tablesort = tablesort_sql($headers);
  //get the results - asset and count of bookmarks by teacher and students
  //to use multiple count in a single table - sigle query - we can use SUM function
  $sql = "SELECT
          asset, title, type, SUM(if(from_rid=3,1,0)) AS teachers, SUM(if(from_rid=4,1,0)) AS students, COUNT(*) AS cnt
          FROM {recommend}
          GROUP BY asset";

  //making the page with pager
  $limit = 15;
  $countquery = "SELECT COUNT(DISTINCT(asset)) FROM {recommend}";
  $result = pager_query($sql . $tablesort, $limit, 0 , $countquery);
  $rows = array();
  while ($row = db_fetch_object($result) ) {
    if ($row->type == "google" || $row->type == "federated") {
      $title = $row->title;
      $link = $row->asset;
      $link_options = array(
        'attributes' => array(
          'target' => '_blank'
        )
      );
    }
    else {
      $nodeobj = node_load($row->asset);
      $title = $nodeobj->title;
      $link = $nodeobj->path;
      $link_options = array();
    }
    $link = l($title, $link, $link_options);

    $rows[] = array(
      'data' => array(
        array('data' => $link),
        array('data' => $row->teachers),
        array('data' => $row->students),
        array('data' => $row->cnt),
      )
    );
  }
  $output .= theme('table', $headers, $rows);
  $output .= theme('pager', NULL, $limit, 0);

  return $output;
}

/**
 *
 * Building the block form
 *
 * It list the recommend in My Recommend Basket
 *
 */
function recommend_block_form($form_state) {
  drupal_add_js(drupal_get_path('module', 'recommend') . '/recommend_block.js');
  global $base_url;
  drupal_add_js(array(
    'recommend' => array(
      'basepath' => $base_url
    )
  ), 'setting');

  $form = array();
  $form['#attributes'] = array('style' => 'display: none');
  $form['rec-content'] = array(
    '#type' => 'markup',
    '#value' => '<div id="rec-block-content">' . recommend_block_default_content() .'</div>',
  );
  return $form;
}

/**
 * It list the recommend in My Recommend Basket for Default
 *
 * @return
 *  It contains Themed HTML list
 *
 * @see recommend_make_link()
 */
function recommend_block_default_content() {
  global $user;
  $uid = $user->uid;
  $limit = 5;
  
  
  //get pager query 
  $recommend_page = isset($_GET['page']) ? $_GET['page'] : implode(',', array_fill(0, RECOMMEND_BASKET_PAGER_ID + 1, 0));
  // get recommend block cache
  $cache_ouput = cache_get("recommend_basket:uid:" . $user->uid . ":page:" . $recommend_page, "cache_eb");
  if ($cache_ouput->data) {
    return $cache_ouput->data;
  }
  else  {
    // check playlist available in playlist basket if available then only add dragable links to listing
    if (function_exists("playlist_query")) {
      $playlist_arguments = array('curriculum', $user->uid, $user->uid, $user->uid, $user->uid);
      $playlist_count = playlist_query(NULL, NULL, $playlist_arguments, TRUE);
    }
    
    //check if user have rights to drag and drop to playlist or asset
    $drop_tooltip = FALSE;
    if (user_access("create curriculum content") || user_access("create asset content")) {
      $drop_tooltip = TRUE;
    }
    
    $count_query = "SELECT COUNT(*) FROM {recommend} WHERE to_uid = %d ORDER BY timestamp DESC";
    $result = pager_query("SELECT * FROM {recommend} WHERE to_uid = %d ORDER BY timestamp DESC", $limit, RECOMMEND_BASKET_PAGER_ID, NULL, $user->uid);
  
    $items = array();
    while ($row = db_fetch_object($result)) {
      if (function_exists("drag_drop_make_link")) {
        $drag_class = "rec-links";
        if ($playlist_count == 0 || !$drop_tooltip) {
          $drag_class = NULL;
        }
        $items[] = drag_drop_make_link_left_block($row->asset, truncate_utf8($row->title, 26, TRUE, TRUE), $row->type, $row->description, $row->title, $drag_class, TRUE);
      }
    }
  
    //If no bookmarks - nothing to do more
    if (!count($items)) {
      $output =  "<p>You have no recommendations.</p>";
    }
    else {
      $output = theme('item_list', $items);
      $pager = theme('pager', NULL, $limit, RECOMMEND_BASKET_PAGER_ID);
    }
    //SET the Recommend block cache
    cache_set("recommend_basket:uid:" . $user->uid . ":page:" . $recommend_page, $output . $pager, "cache_eb"); 
    return $output . $pager;
  }
}

/**
 *
 * Load the data for a single recommend
 *
 * @param $id
 *  It contains Recommend Id
 *
 * @return
 *  It contains object for the recommend
 */
function recommend_load($id) {
  $recommend = db_fetch_object(db_query("SELECT * FROM {recommend} WHERE id = %d", $id));
  return empty($recommend) ? FALSE : $recommend;
}

/**
 *
 * Add rule to check To field is empty or not
 * 
 */
function recommend_fapi_validation_rules() {
  return array(
    'check_empty' => array(
      'callback' => 'recommend_validation_check_empty',
      'error_msg' => t('%field cannot be empty'),
    ),
    'select_comm' => array(
      'callback' => 'recommend_validation_check_communities',
      'error_msg' => t('%field not selected'),
    ),
  );
}

/**
 * Client side validation of check recommend is empty.
 *
 * @param $value
 *  It contains recommend value
 *
 * @return
 *  it contains true or false
 *  
 */
function recommend_validation_check_empty($value) {
  if(empty($value)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * client validation community values  
 *
 */
function recommend_validation_check_communities($value) {
  $value = urldecode(stripslashes($value));
  $value = unserialize($value);
  if(sizeof($value) < 0) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Implementation of hook_clientside_validation_rule_alter().
 *
 */
function recommend_clientside_validation_rule_alter(&$js_rules, $element, $context) {
  switch ($context['type']) {
    case 'fapi':
      if ($context['rule']['callback'] == 'recommend_validation_check_empty') {
        _recommend_set_number($element['#name'], $element['#title'], $decimalpoint, $js_rules);
      }
      if ($context['rule']['callback'] == 'recommend_validation_check_communities') {
        $name = (isset($element['#multiple']) && $element['#multiple']) ? $element['#name'] . '[]' : $element['#name'];
        _recommend_set_communities($name, $element['#title'], $decimalpoint, $js_rules);
      }
      break;
  }
}

/**
 * It contains validation for number
 *
 */
function _recommend_set_number($name, $title, $decimalpoint, &$js_rules){
  drupal_add_js(drupal_get_path('module', 'assignment') . '/js/assignment_validation.js');
  $title = variable_get('clientside_validation_prefix', '') . $title . variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['check'] = TRUE;
  $js_rules[$name]['messages']['check'] = t('!field field is required.', array('!field' => $title));
}

/**
 * Client side validation for community
 *
 */
function _recommend_set_communities($name, $title, $decimalpoint, &$js_rules) {
  drupal_add_js(drupal_get_path('module', 'assignment') . '/js/assignment_validation.js');

  $title = variable_get('clientside_validation_prefix', '') . $title . variable_get('clientside_validation_suffix', '');
  $js_rules[$name]['check_community'] = TRUE;
  $js_rules[$name]['messages']['check_community'] = t('!field field is required.', array('!field' => $title));
}
/**
 * Recommendation listing page pager in ajax load.
 *
 */
function recommend_listing_ajax() {
  $_GET['q'] = 'bridge/myrecommendations';
  print_r(recommendations_new_page());
  exit;
}

/**
 * Recommendation basket block pager in ajax load.
 *
 */
function recommend_block_ajax() {
  print_r(recommend_block_default_content());
  exit;
}
